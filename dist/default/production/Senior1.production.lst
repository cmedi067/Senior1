

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Sun Jun 30 03:27:18 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F15345
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	stringtext1,global,class=STRCODE,delta=2
     5                           	psect	stringtext2,global,class=STRCODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	intentry,global,class=CODE,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	dabs	1,0x7E,2
    28  0000                     
    29                           ; Version 2.05
    30                           ; Generated 20/12/2018 GMT
    31                           ; 
    32                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    33                           ; All rights reserved.
    34                           ; 
    35                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    36                           ; 
    37                           ; Redistribution and use in source and binary forms, with or without modification, are
    38                           ; permitted provided that the following conditions are met:
    39                           ; 
    40                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    41                           ;        conditions and the following disclaimer.
    42                           ; 
    43                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    44                           ;        of conditions and the following disclaimer in the documentation and/or other
    45                           ;        materials provided with the distribution.
    46                           ; 
    47                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    48                           ;        software without specific prior written permission.
    49                           ; 
    50                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    51                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    52                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    53                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    54                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    55                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    56                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    57                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    58                           ; 
    59                           ; 
    60                           ; Code-generator required, PIC16F15345 Definitions
    61                           ; 
    62                           ; SFR Addresses
    63  0000                     	;# 
    64  0001                     	;# 
    65  0002                     	;# 
    66  0003                     	;# 
    67  0004                     	;# 
    68  0005                     	;# 
    69  0006                     	;# 
    70  0007                     	;# 
    71  0008                     	;# 
    72  0009                     	;# 
    73  000A                     	;# 
    74  000B                     	;# 
    75  000C                     	;# 
    76  000D                     	;# 
    77  000E                     	;# 
    78  0012                     	;# 
    79  0013                     	;# 
    80  0014                     	;# 
    81  0018                     	;# 
    82  0019                     	;# 
    83  001A                     	;# 
    84  009B                     	;# 
    85  009B                     	;# 
    86  009C                     	;# 
    87  009D                     	;# 
    88  009E                     	;# 
    89  009F                     	;# 
    90  0119                     	;# 
    91  0119                     	;# 
    92  0119                     	;# 
    93  011A                     	;# 
    94  011A                     	;# 
    95  011A                     	;# 
    96  011B                     	;# 
    97  011B                     	;# 
    98  011B                     	;# 
    99  011B                     	;# 
   100  011B                     	;# 
   101  011C                     	;# 
   102  011C                     	;# 
   103  011C                     	;# 
   104  011D                     	;# 
   105  011D                     	;# 
   106  011D                     	;# 
   107  011E                     	;# 
   108  011E                     	;# 
   109  011E                     	;# 
   110  011F                     	;# 
   111  011F                     	;# 
   112  011F                     	;# 
   113  011F                     	;# 
   114  011F                     	;# 
   115  018C                     	;# 
   116  018D                     	;# 
   117  018E                     	;# 
   118  018F                     	;# 
   119  0190                     	;# 
   120  0191                     	;# 
   121  0192                     	;# 
   122  020C                     	;# 
   123  020C                     	;# 
   124  020D                     	;# 
   125  020E                     	;# 
   126  020F                     	;# 
   127  020F                     	;# 
   128  0210                     	;# 
   129  0210                     	;# 
   130  0211                     	;# 
   131  0211                     	;# 
   132  028C                     	;# 
   133  028C                     	;# 
   134  028D                     	;# 
   135  028D                     	;# 
   136  028E                     	;# 
   137  028F                     	;# 
   138  0290                     	;# 
   139  0291                     	;# 
   140  030C                     	;# 
   141  030C                     	;# 
   142  030D                     	;# 
   143  030E                     	;# 
   144  030F                     	;# 
   145  0310                     	;# 
   146  0310                     	;# 
   147  0311                     	;# 
   148  0312                     	;# 
   149  0313                     	;# 
   150  0314                     	;# 
   151  0314                     	;# 
   152  0315                     	;# 
   153  0316                     	;# 
   154  0318                     	;# 
   155  0318                     	;# 
   156  0319                     	;# 
   157  031A                     	;# 
   158  031C                     	;# 
   159  031C                     	;# 
   160  031D                     	;# 
   161  031E                     	;# 
   162  038C                     	;# 
   163  038C                     	;# 
   164  038D                     	;# 
   165  038E                     	;# 
   166  058C                     	;# 
   167  058C                     	;# 
   168  058D                     	;# 
   169  058E                     	;# 
   170  058F                     	;# 
   171  058F                     	;# 
   172  0590                     	;# 
   173  0591                     	;# 
   174  0592                     	;# 
   175  0593                     	;# 
   176  059C                     	;# 
   177  059C                     	;# 
   178  059D                     	;# 
   179  059D                     	;# 
   180  059E                     	;# 
   181  059F                     	;# 
   182  060C                     	;# 
   183  060D                     	;# 
   184  060E                     	;# 
   185  060F                     	;# 
   186  0610                     	;# 
   187  0611                     	;# 
   188  0612                     	;# 
   189  0613                     	;# 
   190  0614                     	;# 
   191  070C                     	;# 
   192  070D                     	;# 
   193  070E                     	;# 
   194  070F                     	;# 
   195  0710                     	;# 
   196  0711                     	;# 
   197  0712                     	;# 
   198  0713                     	;# 
   199  0716                     	;# 
   200  0717                     	;# 
   201  0718                     	;# 
   202  0719                     	;# 
   203  071A                     	;# 
   204  071B                     	;# 
   205  071C                     	;# 
   206  071D                     	;# 
   207  0796                     	;# 
   208  0797                     	;# 
   209  0798                     	;# 
   210  0799                     	;# 
   211  079A                     	;# 
   212  079B                     	;# 
   213  080C                     	;# 
   214  080D                     	;# 
   215  080E                     	;# 
   216  080F                     	;# 
   217  0810                     	;# 
   218  0811                     	;# 
   219  0812                     	;# 
   220  0813                     	;# 
   221  0814                     	;# 
   222  081A                     	;# 
   223  081A                     	;# 
   224  081B                     	;# 
   225  081C                     	;# 
   226  081C                     	;# 
   227  081D                     	;# 
   228  081E                     	;# 
   229  081F                     	;# 
   230  088C                     	;# 
   231  088D                     	;# 
   232  088E                     	;# 
   233  088F                     	;# 
   234  0890                     	;# 
   235  0891                     	;# 
   236  0892                     	;# 
   237  0893                     	;# 
   238  0895                     	;# 
   239  0896                     	;# 
   240  090C                     	;# 
   241  090E                     	;# 
   242  090F                     	;# 
   243  091F                     	;# 
   244  098F                     	;# 
   245  098F                     	;# 
   246  0990                     	;# 
   247  0991                     	;# 
   248  0992                     	;# 
   249  0993                     	;# 
   250  0994                     	;# 
   251  0995                     	;# 
   252  0996                     	;# 
   253  0997                     	;# 
   254  0A19                     	;# 
   255  0A19                     	;# 
   256  0A1A                     	;# 
   257  0A1A                     	;# 
   258  0A1B                     	;# 
   259  0A1B                     	;# 
   260  0A1B                     	;# 
   261  0A1C                     	;# 
   262  0A1C                     	;# 
   263  0A1D                     	;# 
   264  0A1D                     	;# 
   265  0A1E                     	;# 
   266  0A1E                     	;# 
   267  0A1F                     	;# 
   268  0A1F                     	;# 
   269  0A1F                     	;# 
   270  1E0F                     	;# 
   271  1E10                     	;# 
   272  1E11                     	;# 
   273  1E12                     	;# 
   274  1E13                     	;# 
   275  1E14                     	;# 
   276  1E15                     	;# 
   277  1E16                     	;# 
   278  1E17                     	;# 
   279  1E18                     	;# 
   280  1E19                     	;# 
   281  1E1A                     	;# 
   282  1E1B                     	;# 
   283  1E1C                     	;# 
   284  1E1D                     	;# 
   285  1E1E                     	;# 
   286  1E1F                     	;# 
   287  1E20                     	;# 
   288  1E21                     	;# 
   289  1E22                     	;# 
   290  1E23                     	;# 
   291  1E24                     	;# 
   292  1E25                     	;# 
   293  1E26                     	;# 
   294  1E27                     	;# 
   295  1E28                     	;# 
   296  1E29                     	;# 
   297  1E2A                     	;# 
   298  1E2B                     	;# 
   299  1E2C                     	;# 
   300  1E2D                     	;# 
   301  1E2E                     	;# 
   302  1E2F                     	;# 
   303  1E30                     	;# 
   304  1E31                     	;# 
   305  1E32                     	;# 
   306  1E33                     	;# 
   307  1E34                     	;# 
   308  1E35                     	;# 
   309  1E36                     	;# 
   310  1E37                     	;# 
   311  1E8F                     	;# 
   312  1E90                     	;# 
   313  1E91                     	;# 
   314  1E92                     	;# 
   315  1E93                     	;# 
   316  1E9C                     	;# 
   317  1EA1                     	;# 
   318  1EA2                     	;# 
   319  1EB1                     	;# 
   320  1EBB                     	;# 
   321  1EBC                     	;# 
   322  1EBD                     	;# 
   323  1EBE                     	;# 
   324  1EC3                     	;# 
   325  1EC5                     	;# 
   326  1EC6                     	;# 
   327  1EC7                     	;# 
   328  1ECB                     	;# 
   329  1ECC                     	;# 
   330  1ECD                     	;# 
   331  1ECE                     	;# 
   332  1F10                     	;# 
   333  1F11                     	;# 
   334  1F12                     	;# 
   335  1F13                     	;# 
   336  1F14                     	;# 
   337  1F15                     	;# 
   338  1F1C                     	;# 
   339  1F1D                     	;# 
   340  1F1E                     	;# 
   341  1F1F                     	;# 
   342  1F20                     	;# 
   343  1F21                     	;# 
   344  1F22                     	;# 
   345  1F23                     	;# 
   346  1F24                     	;# 
   347  1F25                     	;# 
   348  1F26                     	;# 
   349  1F27                     	;# 
   350  1F38                     	;# 
   351  1F39                     	;# 
   352  1F3A                     	;# 
   353  1F3B                     	;# 
   354  1F3C                     	;# 
   355  1F3D                     	;# 
   356  1F3E                     	;# 
   357  1F3F                     	;# 
   358  1F43                     	;# 
   359  1F44                     	;# 
   360  1F45                     	;# 
   361  1F46                     	;# 
   362  1F47                     	;# 
   363  1F48                     	;# 
   364  1F49                     	;# 
   365  1F4A                     	;# 
   366  1F4E                     	;# 
   367  1F4F                     	;# 
   368  1F50                     	;# 
   369  1F51                     	;# 
   370  1F52                     	;# 
   371  1F53                     	;# 
   372  1F54                     	;# 
   373  1F55                     	;# 
   374  1FE4                     	;# 
   375  1FE5                     	;# 
   376  1FE6                     	;# 
   377  1FE7                     	;# 
   378  1FE8                     	;# 
   379  1FE8                     	;# 
   380  1FE9                     	;# 
   381  1FEA                     	;# 
   382  1FEA                     	;# 
   383  1FEB                     	;# 
   384  1FED                     	;# 
   385  1FEE                     	;# 
   386  1FEF                     	;# 
   387  0000                     	;# 
   388  0001                     	;# 
   389  0002                     	;# 
   390  0003                     	;# 
   391  0004                     	;# 
   392  0005                     	;# 
   393  0006                     	;# 
   394  0007                     	;# 
   395  0008                     	;# 
   396  0009                     	;# 
   397  000A                     	;# 
   398  000B                     	;# 
   399  000C                     	;# 
   400  000D                     	;# 
   401  000E                     	;# 
   402  0012                     	;# 
   403  0013                     	;# 
   404  0014                     	;# 
   405  0018                     	;# 
   406  0019                     	;# 
   407  001A                     	;# 
   408  009B                     	;# 
   409  009B                     	;# 
   410  009C                     	;# 
   411  009D                     	;# 
   412  009E                     	;# 
   413  009F                     	;# 
   414  0119                     	;# 
   415  0119                     	;# 
   416  0119                     	;# 
   417  011A                     	;# 
   418  011A                     	;# 
   419  011A                     	;# 
   420  011B                     	;# 
   421  011B                     	;# 
   422  011B                     	;# 
   423  011B                     	;# 
   424  011B                     	;# 
   425  011C                     	;# 
   426  011C                     	;# 
   427  011C                     	;# 
   428  011D                     	;# 
   429  011D                     	;# 
   430  011D                     	;# 
   431  011E                     	;# 
   432  011E                     	;# 
   433  011E                     	;# 
   434  011F                     	;# 
   435  011F                     	;# 
   436  011F                     	;# 
   437  011F                     	;# 
   438  011F                     	;# 
   439  018C                     	;# 
   440  018D                     	;# 
   441  018E                     	;# 
   442  018F                     	;# 
   443  0190                     	;# 
   444  0191                     	;# 
   445  0192                     	;# 
   446  020C                     	;# 
   447  020C                     	;# 
   448  020D                     	;# 
   449  020E                     	;# 
   450  020F                     	;# 
   451  020F                     	;# 
   452  0210                     	;# 
   453  0210                     	;# 
   454  0211                     	;# 
   455  0211                     	;# 
   456  028C                     	;# 
   457  028C                     	;# 
   458  028D                     	;# 
   459  028D                     	;# 
   460  028E                     	;# 
   461  028F                     	;# 
   462  0290                     	;# 
   463  0291                     	;# 
   464  030C                     	;# 
   465  030C                     	;# 
   466  030D                     	;# 
   467  030E                     	;# 
   468  030F                     	;# 
   469  0310                     	;# 
   470  0310                     	;# 
   471  0311                     	;# 
   472  0312                     	;# 
   473  0313                     	;# 
   474  0314                     	;# 
   475  0314                     	;# 
   476  0315                     	;# 
   477  0316                     	;# 
   478  0318                     	;# 
   479  0318                     	;# 
   480  0319                     	;# 
   481  031A                     	;# 
   482  031C                     	;# 
   483  031C                     	;# 
   484  031D                     	;# 
   485  031E                     	;# 
   486  038C                     	;# 
   487  038C                     	;# 
   488  038D                     	;# 
   489  038E                     	;# 
   490  058C                     	;# 
   491  058C                     	;# 
   492  058D                     	;# 
   493  058E                     	;# 
   494  058F                     	;# 
   495  058F                     	;# 
   496  0590                     	;# 
   497  0591                     	;# 
   498  0592                     	;# 
   499  0593                     	;# 
   500  059C                     	;# 
   501  059C                     	;# 
   502  059D                     	;# 
   503  059D                     	;# 
   504  059E                     	;# 
   505  059F                     	;# 
   506  060C                     	;# 
   507  060D                     	;# 
   508  060E                     	;# 
   509  060F                     	;# 
   510  0610                     	;# 
   511  0611                     	;# 
   512  0612                     	;# 
   513  0613                     	;# 
   514  0614                     	;# 
   515  070C                     	;# 
   516  070D                     	;# 
   517  070E                     	;# 
   518  070F                     	;# 
   519  0710                     	;# 
   520  0711                     	;# 
   521  0712                     	;# 
   522  0713                     	;# 
   523  0716                     	;# 
   524  0717                     	;# 
   525  0718                     	;# 
   526  0719                     	;# 
   527  071A                     	;# 
   528  071B                     	;# 
   529  071C                     	;# 
   530  071D                     	;# 
   531  0796                     	;# 
   532  0797                     	;# 
   533  0798                     	;# 
   534  0799                     	;# 
   535  079A                     	;# 
   536  079B                     	;# 
   537  080C                     	;# 
   538  080D                     	;# 
   539  080E                     	;# 
   540  080F                     	;# 
   541  0810                     	;# 
   542  0811                     	;# 
   543  0812                     	;# 
   544  0813                     	;# 
   545  0814                     	;# 
   546  081A                     	;# 
   547  081A                     	;# 
   548  081B                     	;# 
   549  081C                     	;# 
   550  081C                     	;# 
   551  081D                     	;# 
   552  081E                     	;# 
   553  081F                     	;# 
   554  088C                     	;# 
   555  088D                     	;# 
   556  088E                     	;# 
   557  088F                     	;# 
   558  0890                     	;# 
   559  0891                     	;# 
   560  0892                     	;# 
   561  0893                     	;# 
   562  0895                     	;# 
   563  0896                     	;# 
   564  090C                     	;# 
   565  090E                     	;# 
   566  090F                     	;# 
   567  091F                     	;# 
   568  098F                     	;# 
   569  098F                     	;# 
   570  0990                     	;# 
   571  0991                     	;# 
   572  0992                     	;# 
   573  0993                     	;# 
   574  0994                     	;# 
   575  0995                     	;# 
   576  0996                     	;# 
   577  0997                     	;# 
   578  0A19                     	;# 
   579  0A19                     	;# 
   580  0A1A                     	;# 
   581  0A1A                     	;# 
   582  0A1B                     	;# 
   583  0A1B                     	;# 
   584  0A1B                     	;# 
   585  0A1C                     	;# 
   586  0A1C                     	;# 
   587  0A1D                     	;# 
   588  0A1D                     	;# 
   589  0A1E                     	;# 
   590  0A1E                     	;# 
   591  0A1F                     	;# 
   592  0A1F                     	;# 
   593  0A1F                     	;# 
   594  1E0F                     	;# 
   595  1E10                     	;# 
   596  1E11                     	;# 
   597  1E12                     	;# 
   598  1E13                     	;# 
   599  1E14                     	;# 
   600  1E15                     	;# 
   601  1E16                     	;# 
   602  1E17                     	;# 
   603  1E18                     	;# 
   604  1E19                     	;# 
   605  1E1A                     	;# 
   606  1E1B                     	;# 
   607  1E1C                     	;# 
   608  1E1D                     	;# 
   609  1E1E                     	;# 
   610  1E1F                     	;# 
   611  1E20                     	;# 
   612  1E21                     	;# 
   613  1E22                     	;# 
   614  1E23                     	;# 
   615  1E24                     	;# 
   616  1E25                     	;# 
   617  1E26                     	;# 
   618  1E27                     	;# 
   619  1E28                     	;# 
   620  1E29                     	;# 
   621  1E2A                     	;# 
   622  1E2B                     	;# 
   623  1E2C                     	;# 
   624  1E2D                     	;# 
   625  1E2E                     	;# 
   626  1E2F                     	;# 
   627  1E30                     	;# 
   628  1E31                     	;# 
   629  1E32                     	;# 
   630  1E33                     	;# 
   631  1E34                     	;# 
   632  1E35                     	;# 
   633  1E36                     	;# 
   634  1E37                     	;# 
   635  1E8F                     	;# 
   636  1E90                     	;# 
   637  1E91                     	;# 
   638  1E92                     	;# 
   639  1E93                     	;# 
   640  1E9C                     	;# 
   641  1EA1                     	;# 
   642  1EA2                     	;# 
   643  1EB1                     	;# 
   644  1EBB                     	;# 
   645  1EBC                     	;# 
   646  1EBD                     	;# 
   647  1EBE                     	;# 
   648  1EC3                     	;# 
   649  1EC5                     	;# 
   650  1EC6                     	;# 
   651  1EC7                     	;# 
   652  1ECB                     	;# 
   653  1ECC                     	;# 
   654  1ECD                     	;# 
   655  1ECE                     	;# 
   656  1F10                     	;# 
   657  1F11                     	;# 
   658  1F12                     	;# 
   659  1F13                     	;# 
   660  1F14                     	;# 
   661  1F15                     	;# 
   662  1F1C                     	;# 
   663  1F1D                     	;# 
   664  1F1E                     	;# 
   665  1F1F                     	;# 
   666  1F20                     	;# 
   667  1F21                     	;# 
   668  1F22                     	;# 
   669  1F23                     	;# 
   670  1F24                     	;# 
   671  1F25                     	;# 
   672  1F26                     	;# 
   673  1F27                     	;# 
   674  1F38                     	;# 
   675  1F39                     	;# 
   676  1F3A                     	;# 
   677  1F3B                     	;# 
   678  1F3C                     	;# 
   679  1F3D                     	;# 
   680  1F3E                     	;# 
   681  1F3F                     	;# 
   682  1F43                     	;# 
   683  1F44                     	;# 
   684  1F45                     	;# 
   685  1F46                     	;# 
   686  1F47                     	;# 
   687  1F48                     	;# 
   688  1F49                     	;# 
   689  1F4A                     	;# 
   690  1F4E                     	;# 
   691  1F4F                     	;# 
   692  1F50                     	;# 
   693  1F51                     	;# 
   694  1F52                     	;# 
   695  1F53                     	;# 
   696  1F54                     	;# 
   697  1F55                     	;# 
   698  1FE4                     	;# 
   699  1FE5                     	;# 
   700  1FE6                     	;# 
   701  1FE7                     	;# 
   702  1FE8                     	;# 
   703  1FE8                     	;# 
   704  1FE9                     	;# 
   705  1FEA                     	;# 
   706  1FEA                     	;# 
   707  1FEB                     	;# 
   708  1FED                     	;# 
   709  1FEE                     	;# 
   710  1FEF                     	;# 
   711  0000                     	;# 
   712  0001                     	;# 
   713  0002                     	;# 
   714  0003                     	;# 
   715  0004                     	;# 
   716  0005                     	;# 
   717  0006                     	;# 
   718  0007                     	;# 
   719  0008                     	;# 
   720  0009                     	;# 
   721  000A                     	;# 
   722  000B                     	;# 
   723  000C                     	;# 
   724  000D                     	;# 
   725  000E                     	;# 
   726  0012                     	;# 
   727  0013                     	;# 
   728  0014                     	;# 
   729  0018                     	;# 
   730  0019                     	;# 
   731  001A                     	;# 
   732  009B                     	;# 
   733  009B                     	;# 
   734  009C                     	;# 
   735  009D                     	;# 
   736  009E                     	;# 
   737  009F                     	;# 
   738  0119                     	;# 
   739  0119                     	;# 
   740  0119                     	;# 
   741  011A                     	;# 
   742  011A                     	;# 
   743  011A                     	;# 
   744  011B                     	;# 
   745  011B                     	;# 
   746  011B                     	;# 
   747  011B                     	;# 
   748  011B                     	;# 
   749  011C                     	;# 
   750  011C                     	;# 
   751  011C                     	;# 
   752  011D                     	;# 
   753  011D                     	;# 
   754  011D                     	;# 
   755  011E                     	;# 
   756  011E                     	;# 
   757  011E                     	;# 
   758  011F                     	;# 
   759  011F                     	;# 
   760  011F                     	;# 
   761  011F                     	;# 
   762  011F                     	;# 
   763  018C                     	;# 
   764  018D                     	;# 
   765  018E                     	;# 
   766  018F                     	;# 
   767  0190                     	;# 
   768  0191                     	;# 
   769  0192                     	;# 
   770  020C                     	;# 
   771  020C                     	;# 
   772  020D                     	;# 
   773  020E                     	;# 
   774  020F                     	;# 
   775  020F                     	;# 
   776  0210                     	;# 
   777  0210                     	;# 
   778  0211                     	;# 
   779  0211                     	;# 
   780  028C                     	;# 
   781  028C                     	;# 
   782  028D                     	;# 
   783  028D                     	;# 
   784  028E                     	;# 
   785  028F                     	;# 
   786  0290                     	;# 
   787  0291                     	;# 
   788  030C                     	;# 
   789  030C                     	;# 
   790  030D                     	;# 
   791  030E                     	;# 
   792  030F                     	;# 
   793  0310                     	;# 
   794  0310                     	;# 
   795  0311                     	;# 
   796  0312                     	;# 
   797  0313                     	;# 
   798  0314                     	;# 
   799  0314                     	;# 
   800  0315                     	;# 
   801  0316                     	;# 
   802  0318                     	;# 
   803  0318                     	;# 
   804  0319                     	;# 
   805  031A                     	;# 
   806  031C                     	;# 
   807  031C                     	;# 
   808  031D                     	;# 
   809  031E                     	;# 
   810  038C                     	;# 
   811  038C                     	;# 
   812  038D                     	;# 
   813  038E                     	;# 
   814  058C                     	;# 
   815  058C                     	;# 
   816  058D                     	;# 
   817  058E                     	;# 
   818  058F                     	;# 
   819  058F                     	;# 
   820  0590                     	;# 
   821  0591                     	;# 
   822  0592                     	;# 
   823  0593                     	;# 
   824  059C                     	;# 
   825  059C                     	;# 
   826  059D                     	;# 
   827  059D                     	;# 
   828  059E                     	;# 
   829  059F                     	;# 
   830  060C                     	;# 
   831  060D                     	;# 
   832  060E                     	;# 
   833  060F                     	;# 
   834  0610                     	;# 
   835  0611                     	;# 
   836  0612                     	;# 
   837  0613                     	;# 
   838  0614                     	;# 
   839  070C                     	;# 
   840  070D                     	;# 
   841  070E                     	;# 
   842  070F                     	;# 
   843  0710                     	;# 
   844  0711                     	;# 
   845  0712                     	;# 
   846  0713                     	;# 
   847  0716                     	;# 
   848  0717                     	;# 
   849  0718                     	;# 
   850  0719                     	;# 
   851  071A                     	;# 
   852  071B                     	;# 
   853  071C                     	;# 
   854  071D                     	;# 
   855  0796                     	;# 
   856  0797                     	;# 
   857  0798                     	;# 
   858  0799                     	;# 
   859  079A                     	;# 
   860  079B                     	;# 
   861  080C                     	;# 
   862  080D                     	;# 
   863  080E                     	;# 
   864  080F                     	;# 
   865  0810                     	;# 
   866  0811                     	;# 
   867  0812                     	;# 
   868  0813                     	;# 
   869  0814                     	;# 
   870  081A                     	;# 
   871  081A                     	;# 
   872  081B                     	;# 
   873  081C                     	;# 
   874  081C                     	;# 
   875  081D                     	;# 
   876  081E                     	;# 
   877  081F                     	;# 
   878  088C                     	;# 
   879  088D                     	;# 
   880  088E                     	;# 
   881  088F                     	;# 
   882  0890                     	;# 
   883  0891                     	;# 
   884  0892                     	;# 
   885  0893                     	;# 
   886  0895                     	;# 
   887  0896                     	;# 
   888  090C                     	;# 
   889  090E                     	;# 
   890  090F                     	;# 
   891  091F                     	;# 
   892  098F                     	;# 
   893  098F                     	;# 
   894  0990                     	;# 
   895  0991                     	;# 
   896  0992                     	;# 
   897  0993                     	;# 
   898  0994                     	;# 
   899  0995                     	;# 
   900  0996                     	;# 
   901  0997                     	;# 
   902  0A19                     	;# 
   903  0A19                     	;# 
   904  0A1A                     	;# 
   905  0A1A                     	;# 
   906  0A1B                     	;# 
   907  0A1B                     	;# 
   908  0A1B                     	;# 
   909  0A1C                     	;# 
   910  0A1C                     	;# 
   911  0A1D                     	;# 
   912  0A1D                     	;# 
   913  0A1E                     	;# 
   914  0A1E                     	;# 
   915  0A1F                     	;# 
   916  0A1F                     	;# 
   917  0A1F                     	;# 
   918  1E0F                     	;# 
   919  1E10                     	;# 
   920  1E11                     	;# 
   921  1E12                     	;# 
   922  1E13                     	;# 
   923  1E14                     	;# 
   924  1E15                     	;# 
   925  1E16                     	;# 
   926  1E17                     	;# 
   927  1E18                     	;# 
   928  1E19                     	;# 
   929  1E1A                     	;# 
   930  1E1B                     	;# 
   931  1E1C                     	;# 
   932  1E1D                     	;# 
   933  1E1E                     	;# 
   934  1E1F                     	;# 
   935  1E20                     	;# 
   936  1E21                     	;# 
   937  1E22                     	;# 
   938  1E23                     	;# 
   939  1E24                     	;# 
   940  1E25                     	;# 
   941  1E26                     	;# 
   942  1E27                     	;# 
   943  1E28                     	;# 
   944  1E29                     	;# 
   945  1E2A                     	;# 
   946  1E2B                     	;# 
   947  1E2C                     	;# 
   948  1E2D                     	;# 
   949  1E2E                     	;# 
   950  1E2F                     	;# 
   951  1E30                     	;# 
   952  1E31                     	;# 
   953  1E32                     	;# 
   954  1E33                     	;# 
   955  1E34                     	;# 
   956  1E35                     	;# 
   957  1E36                     	;# 
   958  1E37                     	;# 
   959  1E8F                     	;# 
   960  1E90                     	;# 
   961  1E91                     	;# 
   962  1E92                     	;# 
   963  1E93                     	;# 
   964  1E9C                     	;# 
   965  1EA1                     	;# 
   966  1EA2                     	;# 
   967  1EB1                     	;# 
   968  1EBB                     	;# 
   969  1EBC                     	;# 
   970  1EBD                     	;# 
   971  1EBE                     	;# 
   972  1EC3                     	;# 
   973  1EC5                     	;# 
   974  1EC6                     	;# 
   975  1EC7                     	;# 
   976  1ECB                     	;# 
   977  1ECC                     	;# 
   978  1ECD                     	;# 
   979  1ECE                     	;# 
   980  1F10                     	;# 
   981  1F11                     	;# 
   982  1F12                     	;# 
   983  1F13                     	;# 
   984  1F14                     	;# 
   985  1F15                     	;# 
   986  1F1C                     	;# 
   987  1F1D                     	;# 
   988  1F1E                     	;# 
   989  1F1F                     	;# 
   990  1F20                     	;# 
   991  1F21                     	;# 
   992  1F22                     	;# 
   993  1F23                     	;# 
   994  1F24                     	;# 
   995  1F25                     	;# 
   996  1F26                     	;# 
   997  1F27                     	;# 
   998  1F38                     	;# 
   999  1F39                     	;# 
  1000  1F3A                     	;# 
  1001  1F3B                     	;# 
  1002  1F3C                     	;# 
  1003  1F3D                     	;# 
  1004  1F3E                     	;# 
  1005  1F3F                     	;# 
  1006  1F43                     	;# 
  1007  1F44                     	;# 
  1008  1F45                     	;# 
  1009  1F46                     	;# 
  1010  1F47                     	;# 
  1011  1F48                     	;# 
  1012  1F49                     	;# 
  1013  1F4A                     	;# 
  1014  1F4E                     	;# 
  1015  1F4F                     	;# 
  1016  1F50                     	;# 
  1017  1F51                     	;# 
  1018  1F52                     	;# 
  1019  1F53                     	;# 
  1020  1F54                     	;# 
  1021  1F55                     	;# 
  1022  1FE4                     	;# 
  1023  1FE5                     	;# 
  1024  1FE6                     	;# 
  1025  1FE7                     	;# 
  1026  1FE8                     	;# 
  1027  1FE8                     	;# 
  1028  1FE9                     	;# 
  1029  1FEA                     	;# 
  1030  1FEA                     	;# 
  1031  1FEB                     	;# 
  1032  1FED                     	;# 
  1033  1FEE                     	;# 
  1034  1FEF                     	;# 
  1035  0013                     _TRISB	set	19
  1036  000B                     _INTCONbits	set	11
  1037  0012                     _TRISA	set	18
  1038  0014                     _TRISC	set	20
  1039  005E                     _PEIE	set	94
  1040  009C                     _ADRESH	set	156
  1041  009B                     _ADRESL	set	155
  1042  009D                     _ADCON0bits	set	157
  1043  009E                     _ADCON1	set	158
  1044  009D                     _ADCON0	set	157
  1045  011A                     _TX1REG	set	282
  1046  0119                     _RC1REG	set	281
  1047  011E                     _TX1STAbits	set	286
  1048  011A                     _TXREG	set	282
  1049  011D                     _RCSTAbits	set	285
  1050  011E                     _TXSTA	set	286
  1051  011F                     _BAUD1CON	set	287
  1052  011D                     _RC1STA	set	285
  1053  011E                     _TX1STA	set	286
  1054  011B                     _SPBRG	set	283
  1055  0717                     _PIE1bits	set	1815
  1056  070F                     _PIR3bits	set	1807
  1057  070D                     _PIR1bits	set	1805
  1058  38CD                     _RC1IE	set	14541
  1059  1ECB                     _RX1DTPPS	set	7883
  1060  1F25                     _RC5PPS	set	7973
  1061  1F4E                     _ANSELC	set	8014
  1062  1F43                     _ANSELB	set	8003
  1063  1F38                     _ANSELA	set	7992
  1064                           
  1065                           	psect	stringtext1
  1066  0331                     __pstringtext1:	
  1067  0331                     STR_1:	
  1068  0331  3443               	retlw	67	;'C'
  1069  0332  3431               	retlw	49	;'1'
  1070  0333  3400               	retlw	0
  1071                           
  1072                           	psect	stringtext2
  1073  0000                     __pstringtext2:	
  1074                           
  1075                           ; #config settings
  1076  0000                     
  1077                           	psect	cinit
  1078  003C                     start_initialization:	
  1079  003C                     __initialization:	
  1080                           
  1081                           ; Clear objects allocated to BANK0
  1082  003C  304B               	movlw	low __pbssBANK0
  1083  003D  0084               	movwf	4
  1084  003E  3000               	movlw	high __pbssBANK0
  1085  003F  0085               	movwf	5
  1086  0040  3008               	movlw	8
  1087  0041  3183  2327  3180   	fcall	clear_ram0
  1088                           
  1089                           ; Clear objects allocated to BANK1
  1090  0044  30A0               	movlw	low __pbssBANK1
  1091  0045  0084               	movwf	4
  1092  0046  3000               	movlw	high __pbssBANK1
  1093  0047  0085               	movwf	5
  1094  0048  3020               	movlw	32
  1095  0049  3183  2327         	fcall	clear_ram0
  1096  004B                     end_of_initialization:	
  1097                           ;End of C runtime variable initialization code
  1098                           
  1099  004B                     __end_of__initialization:	
  1100  004B  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1101  004C  0140               	movlb	0
  1102  004D  3182  2ADD         	ljmp	_main	;jump to C main() function
  1103                           
  1104                           	psect	bssBANK0
  1105  004B                     __pbssBANK0:	
  1106  004B                     _nout:	
  1107  004B                     	ds	2
  1108  004D                     _width:	
  1109  004D                     	ds	2
  1110  004F                     _prec:	
  1111  004F                     	ds	2
  1112  0051                     _flags:	
  1113  0051                     	ds	2
  1114                           
  1115                           	psect	bssBANK1
  1116  00A0                     __pbssBANK1:	
  1117  00A0                     _dbuf:	
  1118  00A0                     	ds	32
  1119                           
  1120                           	psect	clrtext
  1121  0327                     clear_ram0:	
  1122                           ;	Called with FSR0 containing the base address, and
  1123                           ;	WREG with the size to clear
  1124                           
  1125  0327  0064               	clrwdt	;clear the watchdog before getting into this loop
  1126  0328                     clrloop0:	
  1127  0328  0180               	clrf	0	;clear RAM location pointed to by FSR
  1128  0329  3101               	addfsr 0,1
  1129  032A  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1130  032B  2B28               	goto	clrloop0	;have we reached the end yet?
  1131  032C  3400               	retlw	0	;all done for this memory range, return
  1132                           
  1133                           	psect	cstackBANK1
  1134  00C0                     __pcstackBANK1:	
  1135  00C0                     ??_init_UART:	
  1136                           
  1137                           ; 1 bytes @ 0x0
  1138  00C0                     	ds	16
  1139  00D0                     init_UART@spbrgVal:	
  1140                           
  1141                           ; 2 bytes @ 0x10
  1142  00D0                     	ds	2
  1143                           
  1144                           	psect	cstackCOMMON
  1145  0070                     __pcstackCOMMON:	
  1146  0070                     ?_printIntSerial:	
  1147  0070                     ?_readSerial:	
  1148                           ; 1 bytes @ 0x0
  1149                           
  1150  0070                     ??_readSerial:	
  1151                           ; 1 bytes @ 0x0
  1152                           
  1153  0070                     ?_ISR:	
  1154                           ; 1 bytes @ 0x0
  1155                           
  1156  0070                     ?_main:	
  1157                           ; 1 bytes @ 0x0
  1158                           
  1159  0070                     ?_putch:	
  1160                           ; 1 bytes @ 0x0
  1161                           
  1162  0070                     ??_putch:	
  1163                           ; 1 bytes @ 0x0
  1164                           
  1165  0070                     ?_ADC_read_high:	
  1166                           ; 1 bytes @ 0x0
  1167                           
  1168  0070                     ?_ADC_read:	
  1169                           ; 2 bytes @ 0x0
  1170                           
  1171  0070                     putch@byte:	
  1172                           ; 2 bytes @ 0x0
  1173                           
  1174  0070                     printIntSerial@intToSend:	
  1175                           ; 1 bytes @ 0x0
  1176                           
  1177                           
  1178                           ; 2 bytes @ 0x0
  1179  0070                     	ds	1
  1180  0071                     ?_fputc:	
  1181  0071                     fputc@c:	
  1182                           ; 2 bytes @ 0x1
  1183                           
  1184                           
  1185                           ; 2 bytes @ 0x1
  1186  0071                     	ds	1
  1187  0072                     ??_ADC_read_high:	
  1188  0072                     ??_ADC_read:	
  1189                           ; 1 bytes @ 0x2
  1190                           
  1191  0072                     ??_printIntSerial:	
  1192                           ; 1 bytes @ 0x2
  1193                           
  1194                           
  1195                           ; 1 bytes @ 0x2
  1196  0072                     	ds	1
  1197  0073                     fputc@fp:	
  1198                           
  1199                           ; 1 bytes @ 0x3
  1200  0073                     	ds	1
  1201  0074                     ??_fputc:	
  1202                           
  1203                           ; 1 bytes @ 0x4
  1204  0074                     	ds	5
  1205  0079                     ?_vfpfcnvrt:	
  1206  0079                     vfpfcnvrt@fmt:	
  1207                           ; 2 bytes @ 0x9
  1208                           
  1209                           
  1210                           ; 1 bytes @ 0x9
  1211  0079                     	ds	1
  1212  007A                     vfpfcnvrt@ap:	
  1213                           
  1214                           ; 1 bytes @ 0xA
  1215  007A                     	ds	1
  1216  007B                     vfpfcnvrt@vp:	
  1217                           
  1218                           ; 1 bytes @ 0xB
  1219  007B                     	ds	1
  1220  007C                     vfpfcnvrt@fp:	
  1221                           
  1222                           ; 1 bytes @ 0xC
  1223  007C                     	ds	1
  1224  007D                     ??_printf:	
  1225                           
  1226                           ; 1 bytes @ 0xD
  1227  007D                     	ds	1
  1228                           
  1229                           	psect	cstackBANK0
  1230  0020                     __pcstackBANK0:	
  1231  0020                     ??_vfpfcnvrt:	
  1232                           
  1233                           ; 1 bytes @ 0x0
  1234  0020                     	ds	5
  1235  0025                     ?_vfprintf:	
  1236  0025                     vfprintf@fmt:	
  1237                           ; 2 bytes @ 0x5
  1238                           
  1239                           
  1240                           ; 2 bytes @ 0x5
  1241  0025                     	ds	2
  1242  0027                     vfprintf@ap:	
  1243                           
  1244                           ; 1 bytes @ 0x7
  1245  0027                     	ds	1
  1246  0028                     ??_vfprintf:	
  1247                           
  1248                           ; 1 bytes @ 0x8
  1249  0028                     	ds	2
  1250  002A                     vfprintf@fp:	
  1251                           
  1252                           ; 1 bytes @ 0xA
  1253  002A                     	ds	1
  1254  002B                     vfprintf@cfmt:	
  1255                           
  1256                           ; 2 bytes @ 0xB
  1257  002B                     	ds	2
  1258  002D                     ?_printf:	
  1259  002D                     printf@fmt:	
  1260                           ; 2 bytes @ 0xD
  1261                           
  1262                           
  1263                           ; 2 bytes @ 0xD
  1264  002D                     	ds	4
  1265  0031                     printf@ap:	
  1266                           
  1267                           ; 1 bytes @ 0x11
  1268  0031                     	ds	1
  1269  0032                     ??_ISR:	
  1270                           
  1271                           ; 1 bytes @ 0x12
  1272  0032                     	ds	2
  1273  0034                     ISR@adc_out_high:	
  1274                           
  1275                           ; 2 bytes @ 0x14
  1276  0034                     	ds	2
  1277  0036                     ISR@adc_out_low:	
  1278                           
  1279                           ; 2 bytes @ 0x16
  1280  0036                     	ds	2
  1281  0038                     ?_ADC_init:	
  1282  0038                     ?___aldiv:	
  1283                           ; 1 bytes @ 0x18
  1284                           
  1285  0038                     ADC_init@pin:	
  1286                           ; 4 bytes @ 0x18
  1287                           
  1288  0038                     ___aldiv@divisor:	
  1289                           ; 2 bytes @ 0x18
  1290                           
  1291                           
  1292                           ; 4 bytes @ 0x18
  1293  0038                     	ds	2
  1294  003A                     ??_ADC_init:	
  1295                           
  1296                           ; 1 bytes @ 0x1A
  1297  003A                     	ds	2
  1298  003C                     ADC_init@block:	
  1299  003C                     ___aldiv@dividend:	
  1300                           ; 1 bytes @ 0x1C
  1301                           
  1302                           
  1303                           ; 4 bytes @ 0x1C
  1304  003C                     	ds	1
  1305  003D                     ADC_init@chan:	
  1306                           
  1307                           ; 1 bytes @ 0x1D
  1308  003D                     	ds	1
  1309  003E                     ADC_init@pinNum:	
  1310                           
  1311                           ; 2 bytes @ 0x1E
  1312  003E                     	ds	2
  1313  0040                     ??___aldiv:	
  1314                           
  1315                           ; 1 bytes @ 0x20
  1316  0040                     	ds	1
  1317  0041                     ___aldiv@counter:	
  1318                           
  1319                           ; 1 bytes @ 0x21
  1320  0041                     	ds	1
  1321  0042                     ___aldiv@sign:	
  1322                           
  1323                           ; 1 bytes @ 0x22
  1324  0042                     	ds	1
  1325  0043                     ___aldiv@quotient:	
  1326                           
  1327                           ; 4 bytes @ 0x23
  1328  0043                     	ds	4
  1329  0047                     ?_init_UART:	
  1330  0047                     init_UART@baud_rate:	
  1331                           ; 1 bytes @ 0x27
  1332                           
  1333                           
  1334                           ; 4 bytes @ 0x27
  1335  0047                     	ds	4
  1336  004B                     ??_main:	
  1337                           
  1338                           	psect	maintext
  1339  02DD                     __pmaintext:	
  1340                           ; 1 bytes @ 0x2B
  1341 ;;
  1342 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1343 ;;
  1344 ;; *************** function _main *****************
  1345 ;; Defined at:
  1346 ;;		line 72 in file "main.c"
  1347 ;; Parameters:    Size  Location     Type
  1348 ;;		None
  1349 ;; Auto vars:     Size  Location     Type
  1350 ;;		None
  1351 ;; Return value:  Size  Location     Type
  1352 ;;                  1    wreg      void 
  1353 ;; Registers used:
  1354 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1355 ;; Tracked objects:
  1356 ;;		On entry : B3F/0
  1357 ;;		On exit  : 0/0
  1358 ;;		Unchanged: 0/0
  1359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1360 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1361 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1362 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1363 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1364 ;;Total ram usage:        0 bytes
  1365 ;; Hardware stack levels required when called:    8
  1366 ;; This function calls:
  1367 ;;		_ADC_init
  1368 ;;		_init_UART
  1369 ;; This function is called by:
  1370 ;;		Startup code after reset
  1371 ;; This function uses a non-reentrant model
  1372 ;;
  1373                           
  1374                           
  1375                           ;psect for function _main
  1376  02DD                     _main:	
  1377                           
  1378                           ;main.c: 74:     TRISC = 0b00010000;
  1379                           
  1380                           ;incstack = 0
  1381                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1382  02DD  3010               	movlw	16
  1383  02DE  0140               	movlb	0	; select bank0
  1384  02DF  0094               	movwf	20	;volatile
  1385                           
  1386                           ;main.c: 75:     TRISA = 0x00;
  1387  02E0  0192               	clrf	18	;volatile
  1388                           
  1389                           ;main.c: 77:     init_UART(115200);
  1390  02E1  3000               	movlw	0
  1391  02E2  00CA               	movwf	init_UART@baud_rate+3
  1392  02E3  3001               	movlw	1
  1393  02E4  00C9               	movwf	init_UART@baud_rate+2
  1394  02E5  30C2               	movlw	194
  1395  02E6  00C8               	movwf	init_UART@baud_rate+1
  1396  02E7  3000               	movlw	0
  1397  02E8  00C7               	movwf	init_UART@baud_rate
  1398  02E9  3182  2208  3182   	fcall	_init_UART
  1399                           
  1400                           ;main.c: 79:     ADC_init("C1");
  1401  02EC  3031               	movlw	low (STR_1| (0+32768))
  1402  02ED  0140               	movlb	0	; select bank0
  1403  02EE  00B8               	movwf	ADC_init@pin
  1404  02EF  3083               	movlw	high (STR_1| (0+32768))
  1405  02F0  00B9               	movwf	ADC_init@pin+1
  1406  02F1  3180  20ED  3182   	fcall	_ADC_init
  1407  02F4                     l34:	
  1408                           ;main.c: 81:     while(1){ }
  1409                           
  1410  02F4  2AF4               	goto	l34
  1411  02F5                     __end_of_main:	
  1412                           
  1413                           	psect	text1
  1414  0208                     __ptext1:	
  1415 ;; *************** function _init_UART *****************
  1416 ;; Defined at:
  1417 ;;		line 5 in file "UART_funcs.c"
  1418 ;; Parameters:    Size  Location     Type
  1419 ;;  baud_rate       4   39[BANK0 ] long 
  1420 ;; Auto vars:     Size  Location     Type
  1421 ;;  clock           4    0        long 
  1422 ;;  spbrgVal        2   16[BANK1 ] unsigned int 
  1423 ;; Return value:  Size  Location     Type
  1424 ;;                  1    wreg      void 
  1425 ;; Registers used:
  1426 ;;		wreg, status,2, status,0, pclath, cstack
  1427 ;; Tracked objects:
  1428 ;;		On entry : 0/0
  1429 ;;		On exit  : 0/0
  1430 ;;		Unchanged: 0/0
  1431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1432 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1433 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  1434 ;;      Temps:          0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0
  1435 ;;      Totals:         0       4      18       0       0       0       0       0       0       0       0       0       
      +0       0
  1436 ;;Total ram usage:       22 bytes
  1437 ;; Hardware stack levels used:    1
  1438 ;; Hardware stack levels required when called:    7
  1439 ;; This function calls:
  1440 ;;		___aldiv
  1441 ;; This function is called by:
  1442 ;;		_main
  1443 ;; This function uses a non-reentrant model
  1444 ;;
  1445                           
  1446                           
  1447                           ;psect for function _init_UART
  1448  0208                     _init_UART:	
  1449                           
  1450                           ;UART_funcs.c: 7:     ANSELC = 0x00;
  1451                           
  1452                           ;incstack = 0
  1453                           ; Regs used in _init_UART: [wreg+status,2+status,0+pclath+cstack]
  1454  0208  017E               	movlb	62	; select bank62
  1455  0209  01CE               	clrf	78	;volatile
  1456                           
  1457                           ;UART_funcs.c: 10:     RX1DTPPS = 0x14;
  1458  020A  3014               	movlw	20
  1459  020B  017D               	movlb	61	; select bank61
  1460  020C  00CB               	movwf	75	;volatile
  1461                           
  1462                           ;UART_funcs.c: 11:     RC5PPS = 0x0F;
  1463  020D  300F               	movlw	15
  1464  020E  017E               	movlb	62	; select bank62
  1465  020F  00A5               	movwf	37	;volatile
  1466                           
  1467                           ;UART_funcs.c: 14:     unsigned int spbrgVal = (clock - baud_rate * 16) / (baud_rate * 1
      +                          6);
  1468  0210  0140               	movlb	0	; select bank0
  1469  0211  0847               	movf	init_UART@baud_rate,w
  1470  0212  0141               	movlb	1	; select bank1
  1471  0213  00C0               	movwf	??_init_UART^(0+128)
  1472  0214  0140               	movlb	0	; select bank0
  1473  0215  0848               	movf	init_UART@baud_rate+1,w
  1474  0216  0141               	movlb	1	; select bank1
  1475  0217  00C1               	movwf	(??_init_UART^(0+128)+1)
  1476  0218  0140               	movlb	0	; select bank0
  1477  0219  0849               	movf	init_UART@baud_rate+2,w
  1478  021A  0141               	movlb	1	; select bank1
  1479  021B  00C2               	movwf	(??_init_UART^(0+128)+2)
  1480  021C  0140               	movlb	0	; select bank0
  1481  021D  084A               	movf	init_UART@baud_rate+3,w
  1482  021E  0141               	movlb	1	; select bank1
  1483  021F  00C3               	movwf	(??_init_UART^(0+128)+3)
  1484  0220  3004               	movlw	4
  1485  0221                     u675:	
  1486  0221  35C0               	lslf	??_init_UART^(0+128),f
  1487  0222  0DC1               	rlf	(??_init_UART^(0+128)+1),f
  1488  0223  0DC2               	rlf	(??_init_UART^(0+128)+2),f
  1489  0224  0DC3               	rlf	(??_init_UART^(0+128)+3),f
  1490  0225  0B89               	decfsz	9,f
  1491  0226  2A21               	goto	u675
  1492  0227  0843               	movf	(??_init_UART+3)^(0+128),w
  1493  0228  0140               	movlb	0	; select bank0
  1494  0229  00BB               	movwf	___aldiv@divisor+3
  1495  022A  0141               	movlb	1	; select bank1
  1496  022B  0842               	movf	(??_init_UART+2)^(0+128),w
  1497  022C  0140               	movlb	0	; select bank0
  1498  022D  00BA               	movwf	___aldiv@divisor+2
  1499  022E  0141               	movlb	1	; select bank1
  1500  022F  0841               	movf	(??_init_UART+1)^(0+128),w
  1501  0230  0140               	movlb	0	; select bank0
  1502  0231  00B9               	movwf	___aldiv@divisor+1
  1503  0232  0141               	movlb	1	; select bank1
  1504  0233  0840               	movf	??_init_UART^(0+128),w
  1505  0234  0140               	movlb	0	; select bank0
  1506  0235  00B8               	movwf	___aldiv@divisor
  1507  0236  0847               	movf	init_UART@baud_rate,w
  1508  0237  0141               	movlb	1	; select bank1
  1509  0238  00C4               	movwf	(??_init_UART+4)^(0+128)
  1510  0239  0140               	movlb	0	; select bank0
  1511  023A  0848               	movf	init_UART@baud_rate+1,w
  1512  023B  0141               	movlb	1	; select bank1
  1513  023C  00C5               	movwf	((??_init_UART+4)^(0+128)+1)
  1514  023D  0140               	movlb	0	; select bank0
  1515  023E  0849               	movf	init_UART@baud_rate+2,w
  1516  023F  0141               	movlb	1	; select bank1
  1517  0240  00C6               	movwf	((??_init_UART+4)^(0+128)+2)
  1518  0241  0140               	movlb	0	; select bank0
  1519  0242  084A               	movf	init_UART@baud_rate+3,w
  1520  0243  0141               	movlb	1	; select bank1
  1521  0244  00C7               	movwf	((??_init_UART+4)^(0+128)+3)
  1522  0245  3004               	movlw	4
  1523  0246                     u685:	
  1524  0246  35C4               	lslf	(??_init_UART+4)^(0+128),f
  1525  0247  0DC5               	rlf	((??_init_UART+4)^(0+128)+1),f
  1526  0248  0DC6               	rlf	((??_init_UART+4)^(0+128)+2),f
  1527  0249  0DC7               	rlf	((??_init_UART+4)^(0+128)+3),f
  1528  024A  0B89               	decfsz	9,f
  1529  024B  2A46               	goto	u685
  1530  024C  3000               	movlw	0
  1531  024D  00C8               	movwf	(??_init_UART+8)^(0+128)
  1532  024E  3048               	movlw	72
  1533  024F  00C9               	movwf	((??_init_UART+8)^(0+128)+1)
  1534  0250  30E8               	movlw	232
  1535  0251  00CA               	movwf	((??_init_UART+8)^(0+128)+2)
  1536  0252  3001               	movlw	1
  1537  0253  00CB               	movwf	((??_init_UART+8)^(0+128)+3)
  1538  0254  0844               	movf	(??_init_UART+4)^(0+128),w
  1539  0255  02C8               	subwf	(??_init_UART+8)^(0+128),f
  1540  0256  0845               	movf	(??_init_UART+5)^(0+128),w
  1541  0257  3BC9               	subwfb	((??_init_UART+8)^(0+128)+1),f
  1542  0258  0846               	movf	(??_init_UART+6)^(0+128),w
  1543  0259  3BCA               	subwfb	((??_init_UART+8)^(0+128)+2),f
  1544  025A  0847               	movf	(??_init_UART+7)^(0+128),w
  1545  025B  3BCB               	subwfb	((??_init_UART+8)^(0+128)+3),f
  1546  025C  084B               	movf	(??_init_UART+11)^(0+128),w
  1547  025D  0140               	movlb	0	; select bank0
  1548  025E  00BF               	movwf	___aldiv@dividend+3
  1549  025F  0141               	movlb	1	; select bank1
  1550  0260  084A               	movf	(??_init_UART+10)^(0+128),w
  1551  0261  0140               	movlb	0	; select bank0
  1552  0262  00BE               	movwf	___aldiv@dividend+2
  1553  0263  0141               	movlb	1	; select bank1
  1554  0264  0849               	movf	(??_init_UART+9)^(0+128),w
  1555  0265  0140               	movlb	0	; select bank0
  1556  0266  00BD               	movwf	___aldiv@dividend+1
  1557  0267  0141               	movlb	1	; select bank1
  1558  0268  0848               	movf	(??_init_UART+8)^(0+128),w
  1559  0269  0140               	movlb	0	; select bank0
  1560  026A  00BC               	movwf	___aldiv@dividend
  1561  026B  3181  2186         	fcall	___aldiv
  1562  026D  0140               	movlb	0	; select bank0
  1563  026E  0839               	movf	?___aldiv+1,w
  1564  026F  0141               	movlb	1	; select bank1
  1565  0270  00D1               	movwf	(init_UART@spbrgVal+1)^(0+128)
  1566  0271  0140               	movlb	0	; select bank0
  1567  0272  0838               	movf	?___aldiv,w
  1568  0273  0141               	movlb	1	; select bank1
  1569  0274  00D0               	movwf	init_UART@spbrgVal^(0+128)
  1570                           
  1571                           ;UART_funcs.c: 15:     SPBRG = spbrgVal;
  1572  0275  0850               	movf	init_UART@spbrgVal^(0+128),w
  1573  0276  0142               	movlb	2	; select bank2
  1574  0277  009B               	movwf	27	;volatile
  1575                           
  1576                           ;UART_funcs.c: 18:     PEIE = 1;
  1577  0278  170B               	bsf	11,6	;volatile
  1578                           
  1579                           ;UART_funcs.c: 19:     INTCONbits.GIE =1;
  1580  0279  178B               	bsf	11,7	;volatile
  1581                           
  1582                           ;UART_funcs.c: 22:     TX1STA = 0b10100110;
  1583  027A  30A6               	movlw	166
  1584  027B  009E               	movwf	30	;volatile
  1585                           
  1586                           ;UART_funcs.c: 23:     RC1STA = 0b10010000;
  1587  027C  3090               	movlw	144
  1588  027D  009D               	movwf	29	;volatile
  1589                           
  1590                           ;UART_funcs.c: 24:     BAUD1CON = 0b00000000;
  1591  027E  019F               	clrf	31	;volatile
  1592                           
  1593                           ;UART_funcs.c: 26:     RC1IE = 1;
  1594  027F  014E               	movlb	14	; select bank14
  1595  0280  1699               	bsf	25,5	;volatile
  1596  0281  0008               	return
  1597  0282                     __end_of_init_UART:	
  1598                           
  1599                           	psect	text2
  1600  0186                     __ptext2:	
  1601 ;; *************** function ___aldiv *****************
  1602 ;; Defined at:
  1603 ;;		line 5 in file "/opt/microchip/xc8/v2.05/pic/sources/c99/common/aldiv.c"
  1604 ;; Parameters:    Size  Location     Type
  1605 ;;  divisor         4   24[BANK0 ] long 
  1606 ;;  dividend        4   28[BANK0 ] long 
  1607 ;; Auto vars:     Size  Location     Type
  1608 ;;  quotient        4   35[BANK0 ] long 
  1609 ;;  sign            1   34[BANK0 ] unsigned char 
  1610 ;;  counter         1   33[BANK0 ] unsigned char 
  1611 ;; Return value:  Size  Location     Type
  1612 ;;                  4   24[BANK0 ] long 
  1613 ;; Registers used:
  1614 ;;		wreg, status,2, status,0
  1615 ;; Tracked objects:
  1616 ;;		On entry : 0/0
  1617 ;;		On exit  : 0/0
  1618 ;;		Unchanged: 0/0
  1619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1620 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1621 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1622 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1623 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1624 ;;Total ram usage:       15 bytes
  1625 ;; Hardware stack levels used:    1
  1626 ;; Hardware stack levels required when called:    6
  1627 ;; This function calls:
  1628 ;;		Nothing
  1629 ;; This function is called by:
  1630 ;;		_init_UART
  1631 ;; This function uses a non-reentrant model
  1632 ;;
  1633                           
  1634                           
  1635                           ;psect for function ___aldiv
  1636  0186                     ___aldiv:	
  1637                           
  1638                           ;incstack = 0
  1639                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  1640  0186  0140               	movlb	0	; select bank0
  1641  0187  01C2               	clrf	___aldiv@sign
  1642  0188  1FBB               	btfss	___aldiv@divisor+3,7
  1643  0189  2997               	goto	l320
  1644  018A  09B8               	comf	___aldiv@divisor,f
  1645  018B  09B9               	comf	___aldiv@divisor+1,f
  1646  018C  09BA               	comf	___aldiv@divisor+2,f
  1647  018D  09BB               	comf	___aldiv@divisor+3,f
  1648  018E  0AB8               	incf	___aldiv@divisor,f
  1649  018F  1903               	skipnz
  1650  0190  0AB9               	incf	___aldiv@divisor+1,f
  1651  0191  1903               	skipnz
  1652  0192  0ABA               	incf	___aldiv@divisor+2,f
  1653  0193  1903               	skipnz
  1654  0194  0ABB               	incf	___aldiv@divisor+3,f
  1655  0195  01C2               	clrf	___aldiv@sign
  1656  0196  0AC2               	incf	___aldiv@sign,f
  1657  0197                     l320:	
  1658  0197  1FBF               	btfss	___aldiv@dividend+3,7
  1659  0198  29A8               	goto	l1084
  1660  0199  09BC               	comf	___aldiv@dividend,f
  1661  019A  09BD               	comf	___aldiv@dividend+1,f
  1662  019B  09BE               	comf	___aldiv@dividend+2,f
  1663  019C  09BF               	comf	___aldiv@dividend+3,f
  1664  019D  0ABC               	incf	___aldiv@dividend,f
  1665  019E  1903               	skipnz
  1666  019F  0ABD               	incf	___aldiv@dividend+1,f
  1667  01A0  1903               	skipnz
  1668  01A1  0ABE               	incf	___aldiv@dividend+2,f
  1669  01A2  1903               	skipnz
  1670  01A3  0ABF               	incf	___aldiv@dividend+3,f
  1671  01A4  3001               	movlw	1
  1672  01A5  00C0               	movwf	??___aldiv
  1673  01A6  0840               	movf	??___aldiv,w
  1674  01A7  06C2               	xorwf	___aldiv@sign,f
  1675  01A8                     l1084:	
  1676  01A8  3000               	movlw	0
  1677  01A9  00C6               	movwf	___aldiv@quotient+3
  1678  01AA  3000               	movlw	0
  1679  01AB  00C5               	movwf	___aldiv@quotient+2
  1680  01AC  3000               	movlw	0
  1681  01AD  00C4               	movwf	___aldiv@quotient+1
  1682  01AE  3000               	movlw	0
  1683  01AF  00C3               	movwf	___aldiv@quotient
  1684  01B0  083B               	movf	___aldiv@divisor+3,w
  1685  01B1  043A               	iorwf	___aldiv@divisor+2,w
  1686  01B2  0439               	iorwf	___aldiv@divisor+1,w
  1687  01B3  0438               	iorwf	___aldiv@divisor,w
  1688  01B4  1903               	skipnz
  1689  01B5  29F1               	goto	l1106
  1690  01B6  01C1               	clrf	___aldiv@counter
  1691  01B7  0AC1               	incf	___aldiv@counter,f
  1692  01B8                     l1092:	
  1693  01B8  1BBB               	btfsc	___aldiv@divisor+3,7
  1694  01B9  29C6               	goto	l1094
  1695  01BA  3001               	movlw	1
  1696  01BB                     u475:	
  1697  01BB  35B8               	lslf	___aldiv@divisor,f
  1698  01BC  0DB9               	rlf	___aldiv@divisor+1,f
  1699  01BD  0DBA               	rlf	___aldiv@divisor+2,f
  1700  01BE  0DBB               	rlf	___aldiv@divisor+3,f
  1701  01BF  0B89               	decfsz	9,f
  1702  01C0  29BB               	goto	u475
  1703  01C1  3001               	movlw	1
  1704  01C2  00C0               	movwf	??___aldiv
  1705  01C3  0840               	movf	??___aldiv,w
  1706  01C4  07C1               	addwf	___aldiv@counter,f
  1707  01C5  29B8               	goto	l1092
  1708  01C6                     l1094:	
  1709  01C6  3001               	movlw	1
  1710  01C7                     u495:	
  1711  01C7  35C3               	lslf	___aldiv@quotient,f
  1712  01C8  0DC4               	rlf	___aldiv@quotient+1,f
  1713  01C9  0DC5               	rlf	___aldiv@quotient+2,f
  1714  01CA  0DC6               	rlf	___aldiv@quotient+3,f
  1715  01CB  0B89               	decfsz	9,f
  1716  01CC  29C7               	goto	u495
  1717  01CD  083B               	movf	___aldiv@divisor+3,w
  1718  01CE  023F               	subwf	___aldiv@dividend+3,w
  1719  01CF  1D03               	skipz
  1720  01D0  29DB               	goto	u505
  1721  01D1  083A               	movf	___aldiv@divisor+2,w
  1722  01D2  023E               	subwf	___aldiv@dividend+2,w
  1723  01D3  1D03               	skipz
  1724  01D4  29DB               	goto	u505
  1725  01D5  0839               	movf	___aldiv@divisor+1,w
  1726  01D6  023D               	subwf	___aldiv@dividend+1,w
  1727  01D7  1D03               	skipz
  1728  01D8  29DB               	goto	u505
  1729  01D9  0838               	movf	___aldiv@divisor,w
  1730  01DA  023C               	subwf	___aldiv@dividend,w
  1731  01DB                     u505:	
  1732  01DB  1C03               	skipc
  1733  01DC  29E6               	goto	l1102
  1734  01DD  0838               	movf	___aldiv@divisor,w
  1735  01DE  02BC               	subwf	___aldiv@dividend,f
  1736  01DF  0839               	movf	___aldiv@divisor+1,w
  1737  01E0  3BBD               	subwfb	___aldiv@dividend+1,f
  1738  01E1  083A               	movf	___aldiv@divisor+2,w
  1739  01E2  3BBE               	subwfb	___aldiv@dividend+2,f
  1740  01E3  083B               	movf	___aldiv@divisor+3,w
  1741  01E4  3BBF               	subwfb	___aldiv@dividend+3,f
  1742  01E5  1443               	bsf	___aldiv@quotient,0
  1743  01E6                     l1102:	
  1744  01E6  3001               	movlw	1
  1745  01E7                     u515:	
  1746  01E7  36BB               	lsrf	___aldiv@divisor+3,f
  1747  01E8  0CBA               	rrf	___aldiv@divisor+2,f
  1748  01E9  0CB9               	rrf	___aldiv@divisor+1,f
  1749  01EA  0CB8               	rrf	___aldiv@divisor,f
  1750  01EB  0B89               	decfsz	9,f
  1751  01EC  29E7               	goto	u515
  1752  01ED  3001               	movlw	1
  1753  01EE  02C1               	subwf	___aldiv@counter,f
  1754  01EF  1D03               	btfss	3,2
  1755  01F0  29C6               	goto	l1094
  1756  01F1                     l1106:	
  1757  01F1  0842               	movf	___aldiv@sign,w
  1758  01F2  1903               	btfsc	3,2
  1759  01F3  29FF               	goto	l1110
  1760  01F4  09C3               	comf	___aldiv@quotient,f
  1761  01F5  09C4               	comf	___aldiv@quotient+1,f
  1762  01F6  09C5               	comf	___aldiv@quotient+2,f
  1763  01F7  09C6               	comf	___aldiv@quotient+3,f
  1764  01F8  0AC3               	incf	___aldiv@quotient,f
  1765  01F9  1903               	skipnz
  1766  01FA  0AC4               	incf	___aldiv@quotient+1,f
  1767  01FB  1903               	skipnz
  1768  01FC  0AC5               	incf	___aldiv@quotient+2,f
  1769  01FD  1903               	skipnz
  1770  01FE  0AC6               	incf	___aldiv@quotient+3,f
  1771  01FF                     l1110:	
  1772  01FF  0846               	movf	___aldiv@quotient+3,w
  1773  0200  00BB               	movwf	?___aldiv+3
  1774  0201  0845               	movf	___aldiv@quotient+2,w
  1775  0202  00BA               	movwf	?___aldiv+2
  1776  0203  0844               	movf	___aldiv@quotient+1,w
  1777  0204  00B9               	movwf	?___aldiv+1
  1778  0205  0843               	movf	___aldiv@quotient,w
  1779  0206  00B8               	movwf	?___aldiv
  1780  0207  0008               	return
  1781  0208                     __end_of___aldiv:	
  1782                           
  1783                           	psect	text3
  1784  00ED                     __ptext3:	
  1785 ;; *************** function _ADC_init *****************
  1786 ;; Defined at:
  1787 ;;		line 5 in file "ADC_funcs.c"
  1788 ;; Parameters:    Size  Location     Type
  1789 ;;  pin             2   24[BANK0 ] PTR unsigned char 
  1790 ;;		 -> STR_1(3), 
  1791 ;; Auto vars:     Size  Location     Type
  1792 ;;  pinNum          2   30[BANK0 ] int 
  1793 ;;  chan            1   29[BANK0 ] unsigned char 
  1794 ;;  block           1   28[BANK0 ] unsigned char 
  1795 ;; Return value:  Size  Location     Type
  1796 ;;                  1    wreg      unsigned char 
  1797 ;; Registers used:
  1798 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  1799 ;; Tracked objects:
  1800 ;;		On entry : 0/0
  1801 ;;		On exit  : 0/0
  1802 ;;		Unchanged: 0/0
  1803 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1804 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1805 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1806 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1807 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1808 ;;Total ram usage:        8 bytes
  1809 ;; Hardware stack levels used:    1
  1810 ;; Hardware stack levels required when called:    6
  1811 ;; This function calls:
  1812 ;;		Nothing
  1813 ;; This function is called by:
  1814 ;;		_main
  1815 ;; This function uses a non-reentrant model
  1816 ;;
  1817                           
  1818                           
  1819                           ;psect for function _ADC_init
  1820  00ED                     _ADC_init:	
  1821                           
  1822                           ;ADC_funcs.c: 6:     char block = pin[0];
  1823                           
  1824                           ;incstack = 0
  1825                           ; Regs used in _ADC_init: [wreg-fsr0h+status,2+status,0+pclath]
  1826  00ED  0140               	movlb	0	; select bank0
  1827  00EE  0838               	movf	ADC_init@pin,w
  1828  00EF  0084               	movwf	4
  1829  00F0  0839               	movf	ADC_init@pin+1,w
  1830  00F1  0085               	movwf	5
  1831  00F2  0800               	movf	0,w	;code access
  1832  00F3  00BA               	movwf	??_ADC_init
  1833  00F4  083A               	movf	??_ADC_init,w
  1834  00F5  00BC               	movwf	ADC_init@block
  1835                           
  1836                           ;ADC_funcs.c: 7:     int pinNum = pin[1] - '0';
  1837  00F6  0839               	movf	ADC_init@pin+1,w
  1838  00F7  00BB               	movwf	??_ADC_init+1
  1839  00F8  0838               	movf	ADC_init@pin,w
  1840  00F9  00BA               	movwf	??_ADC_init
  1841  00FA  3001               	movlw	1
  1842  00FB  073A               	addwf	??_ADC_init,w
  1843  00FC  0084               	movwf	4
  1844  00FD  083B               	movf	??_ADC_init+1,w
  1845  00FE  1803               	skipnc
  1846  00FF  0A3B               	incf	??_ADC_init+1,w
  1847  0100  0085               	movwf	5
  1848  0101  0800               	movf	0,w	;code access
  1849  0102  3ED0               	addlw	208
  1850  0103  00BE               	movwf	ADC_init@pinNum
  1851  0104  30FF               	movlw	255
  1852  0105  1803               	skipnc
  1853  0106  3000               	movlw	0
  1854  0107  00BF               	movwf	ADC_init@pinNum+1
  1855                           
  1856                           ;ADC_funcs.c: 8:     char chan ;;ADC_funcs.c: 11:     PIR1bits.ADIF = 0;
  1857  0108  014E               	movlb	14	; select bank14
  1858  0109  100D               	bcf	13,0	;volatile
  1859                           
  1860                           ;ADC_funcs.c: 14:     PIE1bits.ADIE = 1;
  1861  010A  1417               	bsf	23,0	;volatile
  1862                           
  1863                           ;ADC_funcs.c: 17:     PEIE = 1;
  1864  010B  170B               	bsf	11,6	;volatile
  1865                           
  1866                           ;ADC_funcs.c: 18:     INTCONbits.GIE =1;
  1867  010C  178B               	bsf	11,7	;volatile
  1868                           
  1869                           ;ADC_funcs.c: 21:      switch(block){
  1870  010D  295C               	goto	l1188
  1871  010E                     l1172:	
  1872  010E  3001               	movlw	1
  1873  010F  00BA               	movwf	??_ADC_init
  1874  0110  0A3E               	incf	ADC_init@pinNum,w
  1875  0111  2913               	goto	u584
  1876  0112                     u585:	
  1877  0112  35BA               	lslf	??_ADC_init,f
  1878  0113                     u584:	
  1879  0113  0B89               	decfsz	9,f
  1880  0114  2912               	goto	u585
  1881  0115  083A               	movf	??_ADC_init,w
  1882  0116  00BB               	movwf	??_ADC_init+1
  1883  0117  083B               	movf	??_ADC_init+1,w
  1884  0118  0492               	iorwf	18,f	;volatile
  1885                           
  1886                           ;ADC_funcs.c: 23:                    ANSELA |= 1 << pinNum;
  1887  0119  3001               	movlw	1
  1888  011A  00BA               	movwf	??_ADC_init
  1889  011B  0A3E               	incf	ADC_init@pinNum,w
  1890  011C  291E               	goto	u594
  1891  011D                     u595:	
  1892  011D  35BA               	lslf	??_ADC_init,f
  1893  011E                     u594:	
  1894  011E  0B89               	decfsz	9,f
  1895  011F  291D               	goto	u595
  1896  0120  083A               	movf	??_ADC_init,w
  1897  0121  00BB               	movwf	??_ADC_init+1
  1898  0122  083B               	movf	??_ADC_init+1,w
  1899  0123  017E               	movlb	62	; select bank62
  1900  0124  04B8               	iorwf	56,f	;volatile
  1901  0125                     l1176:	
  1902  0125  3001               	movlw	1
  1903  0126  0140               	movlb	0	; select bank0
  1904  0127  00BA               	movwf	??_ADC_init
  1905  0128  0A3E               	incf	ADC_init@pinNum,w
  1906  0129  292B               	goto	u604
  1907  012A                     u605:	
  1908  012A  35BA               	lslf	??_ADC_init,f
  1909  012B                     u604:	
  1910  012B  0B89               	decfsz	9,f
  1911  012C  292A               	goto	u605
  1912  012D  083A               	movf	??_ADC_init,w
  1913  012E  00BB               	movwf	??_ADC_init+1
  1914  012F  083B               	movf	??_ADC_init+1,w
  1915  0130  0493               	iorwf	19,f	;volatile
  1916                           
  1917                           ;ADC_funcs.c: 27:                    ANSELB |= 1 << pinNum;
  1918  0131  3001               	movlw	1
  1919  0132  00BA               	movwf	??_ADC_init
  1920  0133  0A3E               	incf	ADC_init@pinNum,w
  1921  0134  2936               	goto	u614
  1922  0135                     u615:	
  1923  0135  35BA               	lslf	??_ADC_init,f
  1924  0136                     u614:	
  1925  0136  0B89               	decfsz	9,f
  1926  0137  2935               	goto	u615
  1927  0138  083A               	movf	??_ADC_init,w
  1928  0139  00BB               	movwf	??_ADC_init+1
  1929  013A  083B               	movf	??_ADC_init+1,w
  1930  013B  017E               	movlb	62	; select bank62
  1931  013C  04C3               	iorwf	67,f	;volatile
  1932  013D                     l1182:	
  1933  013D  3001               	movlw	1
  1934  013E  0140               	movlb	0	; select bank0
  1935  013F  00BA               	movwf	??_ADC_init
  1936  0140  0A3E               	incf	ADC_init@pinNum,w
  1937  0141  2943               	goto	u624
  1938  0142                     u625:	
  1939  0142  35BA               	lslf	??_ADC_init,f
  1940  0143                     u624:	
  1941  0143  0B89               	decfsz	9,f
  1942  0144  2942               	goto	u625
  1943  0145  083A               	movf	??_ADC_init,w
  1944  0146  00BB               	movwf	??_ADC_init+1
  1945  0147  083B               	movf	??_ADC_init+1,w
  1946  0148  0494               	iorwf	20,f	;volatile
  1947                           
  1948                           ;ADC_funcs.c: 31:                    ANSELC |= 1 << pinNum;
  1949  0149  3001               	movlw	1
  1950  014A  00BA               	movwf	??_ADC_init
  1951  014B  0A3E               	incf	ADC_init@pinNum,w
  1952  014C  294E               	goto	u634
  1953  014D                     u635:	
  1954  014D  35BA               	lslf	??_ADC_init,f
  1955  014E                     u634:	
  1956  014E  0B89               	decfsz	9,f
  1957  014F  294D               	goto	u635
  1958  0150  083A               	movf	??_ADC_init,w
  1959  0151  00BB               	movwf	??_ADC_init+1
  1960  0152  083B               	movf	??_ADC_init+1,w
  1961  0153  017E               	movlb	62	; select bank62
  1962  0154  04CE               	iorwf	78,f	;volatile
  1963                           
  1964                           ;ADC_funcs.c: 32:                    chan = 16 + pinNum ;
  1965  0155  0140               	movlb	0	; select bank0
  1966  0156  083E               	movf	ADC_init@pinNum,w
  1967  0157  3E10               	addlw	16
  1968  0158  00BA               	movwf	??_ADC_init
  1969  0159  083A               	movf	??_ADC_init,w
  1970  015A  00BD               	movwf	ADC_init@chan
  1971                           
  1972                           ;ADC_funcs.c: 33:     }
  1973  015B  2970               	goto	l1190
  1974  015C                     l1188:	
  1975  015C  0140               	movlb	0	; select bank0
  1976  015D  083C               	movf	ADC_init@block,w
  1977  015E  00BA               	movwf	??_ADC_init
  1978  015F  01BB               	clrf	??_ADC_init+1
  1979                           
  1980                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1981                           ; Switch size 1, requested type "simple"
  1982                           ; Number of cases is 1, Range of values is 0 to 0
  1983                           ; switch strategies available:
  1984                           ; Name         Instructions Cycles
  1985                           ; simple_byte            4     3 (average)
  1986                           ; direct_byte            8     6 (fixed)
  1987                           ; jumptable            260     6 (fixed)
  1988                           ;	Chosen strategy is simple_byte
  1989  0160  083B               	movf	??_ADC_init+1,w
  1990  0161  3A00               	xorlw	0	; case 0
  1991  0162  1903               	skipnz
  1992  0163  2965               	goto	l1298
  1993  0164  2970               	goto	l1190
  1994  0165                     l1298:	
  1995                           
  1996                           ; Switch size 1, requested type "simple"
  1997                           ; Number of cases is 3, Range of values is 65 to 67
  1998                           ; switch strategies available:
  1999                           ; Name         Instructions Cycles
  2000                           ; simple_byte           10     6 (average)
  2001                           ; direct_byte           15     9 (fixed)
  2002                           ; jumptable            263     9 (fixed)
  2003                           ;	Chosen strategy is simple_byte
  2004  0165  083A               	movf	??_ADC_init,w
  2005  0166  3A41               	xorlw	65	; case 65
  2006  0167  1903               	skipnz
  2007  0168  290E               	goto	l1172
  2008  0169  3A03               	xorlw	3	; case 66
  2009  016A  1903               	skipnz
  2010  016B  2925               	goto	l1176
  2011  016C  3A01               	xorlw	1	; case 67
  2012  016D  1903               	skipnz
  2013  016E  293D               	goto	l1182
  2014  016F  2970               	goto	l1190
  2015  0170                     l1190:	
  2016                           
  2017                           ;ADC_funcs.c: 36:     ADCON0 |= chan << 2;
  2018  0170  083D               	movf	ADC_init@chan,w	;volatile
  2019  0171  00BA               	movwf	??_ADC_init
  2020  0172  3001               	movlw	1
  2021  0173                     u645:	
  2022  0173  35BA               	lslf	??_ADC_init,f
  2023  0174  3EFF               	addlw	-1
  2024  0175  1D03               	skipz
  2025  0176  2973               	goto	u645
  2026  0177  353A               	lslf	??_ADC_init,w
  2027  0178  00BB               	movwf	??_ADC_init+1
  2028  0179  083B               	movf	??_ADC_init+1,w
  2029  017A  0141               	movlb	1	; select bank1
  2030  017B  049D               	iorwf	29,f	;volatile
  2031                           
  2032                           ;ADC_funcs.c: 39:     ADCON1 = 0b10100000;
  2033  017C  30A0               	movlw	160
  2034  017D  009E               	movwf	30	;volatile
  2035                           
  2036                           ;ADC_funcs.c: 42:     ADCON0bits.ADON = 1;
  2037  017E  141D               	bsf	29,0	;volatile
  2038                           
  2039                           ;ADC_funcs.c: 43:     _delay((unsigned long)((50)*(32000000/4000000.0)));
  2040  017F  3085               	movlw	133
  2041  0180                     u697:	
  2042  0180  0B89               	decfsz	9,f
  2043  0181  2980               	goto	u697
  2044  0182  0000               	nop
  2045                           
  2046                           ;ADC_funcs.c: 44:     ADCON0bits.GOnDONE = 1;
  2047  0183  0141               	movlb	1	; select bank1
  2048  0184  149D               	bsf	29,1	;volatile
  2049  0185  0008               	return
  2050  0186                     __end_of_ADC_init:	
  2051                           
  2052                           	psect	intentry
  2053  0004                     __pintentry:	
  2054 ;; *************** function _ISR *****************
  2055 ;; Defined at:
  2056 ;;		line 54 in file "main.c"
  2057 ;; Parameters:    Size  Location     Type
  2058 ;;		None
  2059 ;; Auto vars:     Size  Location     Type
  2060 ;;  adc_out_low     2   22[BANK0 ] unsigned int 
  2061 ;;  adc_out_high    2   20[BANK0 ] unsigned int 
  2062 ;; Return value:  Size  Location     Type
  2063 ;;                  1    wreg      void 
  2064 ;; Registers used:
  2065 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2066 ;; Tracked objects:
  2067 ;;		On entry : 0/0
  2068 ;;		On exit  : 0/0
  2069 ;;		Unchanged: 0/0
  2070 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2071 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2072 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2073 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2074 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2075 ;;Total ram usage:        6 bytes
  2076 ;; Hardware stack levels used:    1
  2077 ;; Hardware stack levels required when called:    5
  2078 ;; This function calls:
  2079 ;;		_ADC_read
  2080 ;;		_ADC_read_high
  2081 ;;		_printIntSerial
  2082 ;;		_printf
  2083 ;;		_readSerial
  2084 ;; This function is called by:
  2085 ;;		Interrupt level 1
  2086 ;; This function uses a non-reentrant model
  2087 ;;
  2088                           
  2089  0004                     _ISR:	
  2090                           
  2091                           ;incstack = 0
  2092  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  2093                           
  2094                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2095  0005  3180               	pagesel	$
  2096                           
  2097                           ;main.c: 55:     if(PIR1bits.ADIF == 1){
  2098  0006  014E               	movlb	14	; select bank14
  2099  0007  1C0D               	btfss	13,0	;volatile
  2100  0008  282A               	goto	i1l1214
  2101                           
  2102                           ;main.c: 56:        unsigned int adc_out_high = ADC_read_high();
  2103  0009  3183  2311  3180   	fcall	_ADC_read_high
  2104  000C  0871               	movf	?_ADC_read_high+1,w
  2105  000D  0140               	movlb	0	; select bank0
  2106  000E  00B5               	movwf	ISR@adc_out_high+1
  2107  000F  0870               	movf	?_ADC_read_high,w
  2108  0010  00B4               	movwf	ISR@adc_out_high
  2109                           
  2110                           ;main.c: 57:        unsigned int adc_out_low = ADC_read();
  2111  0011  3183  231C  3180   	fcall	_ADC_read
  2112  0014  0871               	movf	?_ADC_read+1,w
  2113  0015  0140               	movlb	0	; select bank0
  2114  0016  00B7               	movwf	ISR@adc_out_low+1
  2115  0017  0870               	movf	?_ADC_read,w
  2116  0018  00B6               	movwf	ISR@adc_out_low
  2117                           
  2118                           ;main.c: 61:         printIntSerial(adc_out_high);
  2119  0019  0835               	movf	ISR@adc_out_high+1,w
  2120  001A  00F1               	movwf	printIntSerial@intToSend+1
  2121  001B  0834               	movf	ISR@adc_out_high,w
  2122  001C  00F0               	movwf	printIntSerial@intToSend
  2123  001D  3183  232D  3180   	fcall	_printIntSerial
  2124                           
  2125                           ;main.c: 62:        printIntSerial(adc_out_low);
  2126  0020  0140               	movlb	0	; select bank0
  2127  0021  0837               	movf	ISR@adc_out_low+1,w
  2128  0022  00F1               	movwf	printIntSerial@intToSend+1
  2129  0023  0836               	movf	ISR@adc_out_low,w
  2130  0024  00F0               	movwf	printIntSerial@intToSend
  2131  0025  3183  232D  3180   	fcall	_printIntSerial
  2132                           
  2133                           ;main.c: 64:         PIR1bits.ADIF = 0;
  2134  0028  014E               	movlb	14	; select bank14
  2135  0029  100D               	bcf	13,0	;volatile
  2136  002A                     i1l1214:	
  2137                           
  2138                           ;main.c: 67:     if(PIR3bits.RC1IF == 1){
  2139  002A  1E8F               	btfss	15,5	;volatile
  2140  002B  2838               	goto	i1l29
  2141                           
  2142                           ;main.c: 68:         printf(readSerial());
  2143  002C  3183  2334  3180   	fcall	_readSerial
  2144  002F  0140               	movlb	0	; select bank0
  2145  0030  00B2               	movwf	??_ISR
  2146  0031  01B3               	clrf	??_ISR+1
  2147  0032  0832               	movf	??_ISR,w
  2148  0033  00AD               	movwf	printf@fmt
  2149  0034  0833               	movf	??_ISR+1,w
  2150  0035  00AE               	movwf	printf@fmt+1
  2151  0036  3182  22F5         	fcall	_printf
  2152  0038                     i1l29:	
  2153  0038  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  2154  0039  0009               	retfie
  2155  003A                     __end_of_ISR:	
  2156                           
  2157                           	psect	text5
  2158  0334                     __ptext5:	
  2159 ;; *************** function _readSerial *****************
  2160 ;; Defined at:
  2161 ;;		line 41 in file "UART_funcs.c"
  2162 ;; Parameters:    Size  Location     Type
  2163 ;;		None
  2164 ;; Auto vars:     Size  Location     Type
  2165 ;;		None
  2166 ;; Return value:  Size  Location     Type
  2167 ;;                  1    wreg      unsigned char 
  2168 ;; Registers used:
  2169 ;;		wreg
  2170 ;; Tracked objects:
  2171 ;;		On entry : 0/0
  2172 ;;		On exit  : 0/0
  2173 ;;		Unchanged: 0/0
  2174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2175 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2176 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2177 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2178 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2179 ;;Total ram usage:        0 bytes
  2180 ;; Hardware stack levels used:    1
  2181 ;; This function calls:
  2182 ;;		Nothing
  2183 ;; This function is called by:
  2184 ;;		_ISR
  2185 ;; This function uses a non-reentrant model
  2186 ;;
  2187                           
  2188                           
  2189                           ;psect for function _readSerial
  2190  0334                     _readSerial:	
  2191                           
  2192                           ;UART_funcs.c: 42:     return RC1REG;
  2193                           
  2194                           ;incstack = 0
  2195                           ; Regs used in _readSerial: [wreg]
  2196  0334  0142               	movlb	2	; select bank2
  2197  0335  0819               	movf	25,w	;volatile
  2198  0336  0008               	return
  2199  0337                     __end_of_readSerial:	
  2200                           
  2201                           	psect	text6
  2202  02F5                     __ptext6:	
  2203 ;; *************** function _printf *****************
  2204 ;; Defined at:
  2205 ;;		line 5 in file "/opt/microchip/xc8/v2.05/pic/sources/c99/common/printf.c"
  2206 ;; Parameters:    Size  Location     Type
  2207 ;;  fmt             2   13[BANK0 ] PTR const unsigned char 
  2208 ;;		 -> ROM(8192), 
  2209 ;; Auto vars:     Size  Location     Type
  2210 ;;  ret             2    0        int 
  2211 ;;  ap              1   17[BANK0 ] PTR void [1]
  2212 ;;		 -> ?_printf(2), 
  2213 ;; Return value:  Size  Location     Type
  2214 ;;                  2   13[BANK0 ] int 
  2215 ;; Registers used:
  2216 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2217 ;; Tracked objects:
  2218 ;;		On entry : 0/0
  2219 ;;		On exit  : 0/0
  2220 ;;		Unchanged: 0/0
  2221 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2222 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2223 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2224 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2225 ;;      Totals:         1       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2226 ;;Total ram usage:        6 bytes
  2227 ;; Hardware stack levels used:    1
  2228 ;; Hardware stack levels required when called:    4
  2229 ;; This function calls:
  2230 ;;		_vfprintf
  2231 ;; This function is called by:
  2232 ;;		_ISR
  2233 ;; This function uses a non-reentrant model
  2234 ;;
  2235                           
  2236                           
  2237                           ;psect for function _printf
  2238  02F5                     _printf:	
  2239                           
  2240                           ;incstack = 0
  2241                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2242  02F5  302F               	movlw	(low ((?_printf| 0+2)))& (0+255)
  2243  02F6  00FD               	movwf	??_printf
  2244  02F7  087D               	movf	??_printf,w
  2245  02F8  0140               	movlb	0	; select bank0
  2246  02F9  00B1               	movwf	printf@ap
  2247  02FA  082E               	movf	printf@fmt+1,w
  2248  02FB  00A6               	movwf	vfprintf@fmt+1
  2249  02FC  082D               	movf	printf@fmt,w
  2250  02FD  00A5               	movwf	vfprintf@fmt
  2251  02FE  3031               	movlw	(low (printf@ap| 0))& (0+255)
  2252  02FF  00FD               	movwf	??_printf
  2253  0300  087D               	movf	??_printf,w
  2254  0301  00A7               	movwf	vfprintf@ap
  2255  0302  3000               	movlw	0
  2256  0303  3182  22B7         	fcall	_vfprintf
  2257  0305  0008               	return
  2258  0306                     __end_of_printf:	
  2259                           
  2260                           	psect	text7
  2261  02B7                     __ptext7:	
  2262 ;; *************** function _vfprintf *****************
  2263 ;; Defined at:
  2264 ;;		line 1368 in file "/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c"
  2265 ;; Parameters:    Size  Location     Type
  2266 ;;  fp              1    wreg     PTR struct _IO_FILE
  2267 ;;		 -> NULL(0), 
  2268 ;;  fmt             2    5[BANK0 ] PTR const unsigned char 
  2269 ;;		 -> ROM(8192), 
  2270 ;;  ap              1    7[BANK0 ] PTR PTR void 
  2271 ;;		 -> printf@ap(1), 
  2272 ;; Auto vars:     Size  Location     Type
  2273 ;;  fp              1   10[BANK0 ] PTR struct _IO_FILE
  2274 ;;		 -> NULL(0), 
  2275 ;;  cfmt            2   11[BANK0 ] PTR unsigned char 
  2276 ;;		 -> ROM(8192), 
  2277 ;; Return value:  Size  Location     Type
  2278 ;;                  2    5[BANK0 ] int 
  2279 ;; Registers used:
  2280 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2281 ;; Tracked objects:
  2282 ;;		On entry : 0/0
  2283 ;;		On exit  : 0/0
  2284 ;;		Unchanged: 0/0
  2285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2286 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2287 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2288 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2289 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2290 ;;Total ram usage:        8 bytes
  2291 ;; Hardware stack levels used:    1
  2292 ;; Hardware stack levels required when called:    3
  2293 ;; This function calls:
  2294 ;;		_vfpfcnvrt
  2295 ;; This function is called by:
  2296 ;;		_printf
  2297 ;; This function uses a non-reentrant model
  2298 ;;
  2299                           
  2300                           
  2301                           ;psect for function _vfprintf
  2302  02B7                     _vfprintf:	
  2303                           
  2304                           ;incstack = 0
  2305                           ; Regs used in _vfprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2306                           ;vfprintf@fp stored from wreg
  2307  02B7  0140               	movlb	0	; select bank0
  2308  02B8  00AA               	movwf	vfprintf@fp
  2309                           
  2310                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1368: int vfprintf(FILE *fp, 
      +                          const char *fmt, va_list ap);/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1
      +                          369: {;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1371:     char *cfmt;;/
      +                          opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1373:     cfmt = (char *)fmt;
  2311  02B9  0826               	movf	vfprintf@fmt+1,w
  2312  02BA  00AC               	movwf	vfprintf@cfmt+1
  2313  02BB  0825               	movf	vfprintf@fmt,w
  2314  02BC  00AB               	movwf	vfprintf@cfmt
  2315                           
  2316                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1374:     nout = 0;
  2317  02BD  01CB               	clrf	_nout
  2318  02BE  01CC               	clrf	_nout+1
  2319  02BF                     i1l1068:	
  2320                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1375:     while (*cfmt) {
  2321                           
  2322                           
  2323                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1375:     while (*cfmt) {
  2324  02BF  082B               	movf	vfprintf@cfmt,w
  2325  02C0  0084               	movwf	4
  2326  02C1  082C               	movf	vfprintf@cfmt+1,w
  2327  02C2  0085               	movwf	5
  2328  02C3  0012               	moviw fsr0++
  2329  02C4  1903               	btfsc	3,2
  2330  02C5  2AD8               	goto	i1l1070
  2331                           
  2332                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1376:         nout += vfpfcnv
      +                          rt(fp, &cfmt, ap);
  2333  02C6  302B               	movlw	(low (vfprintf@cfmt| 0))& (0+255)
  2334  02C7  00A8               	movwf	??_vfprintf
  2335  02C8  0828               	movf	??_vfprintf,w
  2336  02C9  00F9               	movwf	vfpfcnvrt@fmt
  2337  02CA  0827               	movf	vfprintf@ap,w
  2338  02CB  00A9               	movwf	??_vfprintf+1
  2339  02CC  0829               	movf	??_vfprintf+1,w
  2340  02CD  00FA               	movwf	vfpfcnvrt@ap
  2341  02CE  082A               	movf	vfprintf@fp,w
  2342  02CF  3180  204F  3182   	fcall	_vfpfcnvrt
  2343  02D2  0879               	movf	?_vfpfcnvrt,w
  2344  02D3  0140               	movlb	0	; select bank0
  2345  02D4  07CB               	addwf	_nout,f
  2346  02D5  087A               	movf	?_vfpfcnvrt+1,w
  2347  02D6  3DCC               	addwfc	_nout+1,f
  2348  02D7  2ABF               	goto	i1l1068
  2349  02D8                     i1l1070:	
  2350                           
  2351                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1378:     return nout;
  2352  02D8  084C               	movf	_nout+1,w
  2353  02D9  00A6               	movwf	?_vfprintf+1
  2354  02DA  084B               	movf	_nout,w
  2355  02DB  00A5               	movwf	?_vfprintf
  2356  02DC  0008               	return
  2357  02DD                     __end_of_vfprintf:	
  2358                           
  2359                           	psect	text8
  2360  004F                     __ptext8:	
  2361 ;; *************** function _vfpfcnvrt *****************
  2362 ;; Defined at:
  2363 ;;		line 670 in file "/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c"
  2364 ;; Parameters:    Size  Location     Type
  2365 ;;  fp              1    wreg     PTR struct _IO_FILE
  2366 ;;		 -> NULL(0), 
  2367 ;;  fmt             1    9[COMMON] PTR PTR unsigned char 
  2368 ;;		 -> vfprintf@cfmt(2), 
  2369 ;;  ap              1   10[COMMON] PTR PTR void 
  2370 ;;		 -> printf@ap(1), 
  2371 ;; Auto vars:     Size  Location     Type
  2372 ;;  fp              1   12[COMMON] PTR struct _IO_FILE
  2373 ;;		 -> NULL(0), 
  2374 ;;  llu             8    0        unsigned long long 
  2375 ;;  ll              8    0        long long 
  2376 ;;  f               4    0        long long 
  2377 ;;  ct              3    0        unsigned char [3]
  2378 ;;  i               2    0        int 
  2379 ;;  done            2    0        int 
  2380 ;;  cp              2    0        PTR unsigned char 
  2381 ;;  vp              1   11[COMMON] PTR void 
  2382 ;;		 -> ?_printf(2), 
  2383 ;;  c               1    0        unsigned char 
  2384 ;; Return value:  Size  Location     Type
  2385 ;;                  2    9[COMMON] int 
  2386 ;; Registers used:
  2387 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2388 ;; Tracked objects:
  2389 ;;		On entry : 0/0
  2390 ;;		On exit  : 0/0
  2391 ;;		Unchanged: 0/0
  2392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2393 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2394 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2395 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2396 ;;      Totals:         4       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2397 ;;Total ram usage:        9 bytes
  2398 ;; Hardware stack levels used:    1
  2399 ;; Hardware stack levels required when called:    2
  2400 ;; This function calls:
  2401 ;;		_fputc
  2402 ;; This function is called by:
  2403 ;;		_vfprintf
  2404 ;; This function uses a non-reentrant model
  2405 ;;
  2406                           
  2407                           
  2408                           ;psect for function _vfpfcnvrt
  2409  004F                     _vfpfcnvrt:	
  2410                           
  2411                           ;incstack = 0
  2412                           ; Regs used in _vfpfcnvrt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2413                           ;vfpfcnvrt@fp stored from wreg
  2414  004F  00FC               	movwf	vfpfcnvrt@fp
  2415                           
  2416                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 670: static int vfpfcnvrt(FIL
      +                          E *fp, char *fmt[], va_list ap);/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c
      +                          : 671: {;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 672:     char c, *cp,
      +                           ct[3];;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 673:     int done, i;;
      +                          /opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 674:     long long ll;;/opt/mi
      +                          crochip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 675:     unsigned long long llu;
  2417  0050  0879               	movf	vfpfcnvrt@fmt,w
  2418  0051  0086               	movwf	6
  2419  0052  0187               	clrf	7
  2420  0053  3F40               	moviw [0]fsr1
  2421  0054  0140               	movlb	0	; select bank0
  2422  0055  00A0               	movwf	??_vfpfcnvrt
  2423  0056  3F41               	moviw [1]fsr1
  2424  0057  00A1               	movwf	??_vfpfcnvrt+1
  2425  0058  0820               	movf	??_vfpfcnvrt,w
  2426  0059  0084               	movwf	4
  2427  005A  0821               	movf	??_vfpfcnvrt+1,w
  2428  005B  0085               	movwf	5
  2429  005C  0012               	moviw fsr0++
  2430  005D  3A25               	xorlw	37
  2431  005E  1D03               	btfss	3,2
  2432  005F  28CB               	goto	i1l1054
  2433                           
  2434                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 681:         ++*fmt;
  2435  0060  0879               	movf	vfpfcnvrt@fmt,w
  2436  0061  0086               	movwf	6
  2437  0062  0187               	clrf	7
  2438  0063  3001               	movlw	1
  2439  0064  0781               	addwf	1,f
  2440  0065  3141               	addfsr 1,1
  2441  0066  1803               	skipnc
  2442  0067  0A81               	incf	1,f
  2443                           
  2444                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 683:         flags = width = 
      +                          0;
  2445  0068  01CD               	clrf	_width
  2446  0069  01CE               	clrf	_width+1
  2447  006A  01D1               	clrf	_flags
  2448  006B  01D2               	clrf	_flags+1
  2449                           
  2450                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 684:         prec = -1;
  2451  006C  30FF               	movlw	255
  2452  006D  00CF               	movwf	_prec
  2453  006E  30FF               	movlw	255
  2454  006F  00D0               	movwf	_prec+1
  2455                           
  2456                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1077:         if (*fmt[0] == 
      +                          'n') {
  2457  0070  0879               	movf	vfpfcnvrt@fmt,w
  2458  0071  0086               	movwf	6
  2459  0072  0187               	clrf	7
  2460  0073  3F40               	moviw [0]fsr1
  2461  0074  00A0               	movwf	??_vfpfcnvrt
  2462  0075  3F41               	moviw [1]fsr1
  2463  0076  00A1               	movwf	??_vfpfcnvrt+1
  2464  0077  0820               	movf	??_vfpfcnvrt,w
  2465  0078  0084               	movwf	4
  2466  0079  0821               	movf	??_vfpfcnvrt+1,w
  2467  007A  0085               	movwf	5
  2468  007B  0012               	moviw fsr0++
  2469  007C  3A6E               	xorlw	110
  2470  007D  1D03               	btfss	3,2
  2471  007E  289C               	goto	i1l1038
  2472                           
  2473                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1078:             ++*fmt;
  2474  007F  0879               	movf	vfpfcnvrt@fmt,w
  2475  0080  0086               	movwf	6
  2476  0081  0187               	clrf	7
  2477  0082  3001               	movlw	1
  2478  0083  0781               	addwf	1,f
  2479  0084  3141               	addfsr 1,1
  2480  0085  1803               	skipnc
  2481  0086  0A81               	incf	1,f
  2482                           
  2483                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1079:             vp = (void 
      +                          *)(*(int * *)__va_arg(*(int * **)ap, (int *)0));
  2484  0087  087A               	movf	vfpfcnvrt@ap,w
  2485  0088  0086               	movwf	6
  2486  0089  0187               	clrf	7
  2487  008A  3F40               	moviw [0]fsr1
  2488  008B  0084               	movwf	4
  2489  008C  0185               	clrf	5
  2490  008D  0A81               	incf	1,f
  2491  008E  0800               	movf	0,w
  2492  008F  00A0               	movwf	??_vfpfcnvrt
  2493  0090  0820               	movf	??_vfpfcnvrt,w
  2494  0091  00FB               	movwf	vfpfcnvrt@vp
  2495                           
  2496                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1080:             *(int *)vp 
      +                          = nout;
  2497  0092  087B               	movf	vfpfcnvrt@vp,w
  2498  0093  0086               	movwf	6
  2499  0094  0187               	clrf	7
  2500  0095  084B               	movf	_nout,w
  2501  0096  3FC0               	movwi [0]fsr1
  2502  0097  084C               	movf	_nout+1,w
  2503  0098  3FC1               	movwi [1]fsr1
  2504  0099                     i1l1034:	
  2505                           
  2506                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1081:             return 0;
  2507  0099  01F9               	clrf	?_vfpfcnvrt
  2508  009A  01FA               	clrf	?_vfpfcnvrt+1
  2509  009B  0008               	return
  2510  009C                     i1l1038:	
  2511                           
  2512                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1350:         if ((*fmt)[0] =
      +                          = '%') {
  2513  009C  0879               	movf	vfpfcnvrt@fmt,w
  2514  009D  0086               	movwf	6
  2515  009E  0187               	clrf	7
  2516  009F  3F40               	moviw [0]fsr1
  2517  00A0  00A0               	movwf	??_vfpfcnvrt
  2518  00A1  3F41               	moviw [1]fsr1
  2519  00A2  00A1               	movwf	??_vfpfcnvrt+1
  2520  00A3  0820               	movf	??_vfpfcnvrt,w
  2521  00A4  0084               	movwf	4
  2522  00A5  0821               	movf	??_vfpfcnvrt+1,w
  2523  00A6  0085               	movwf	5
  2524  00A7  0012               	moviw fsr0++
  2525  00A8  3A25               	xorlw	37
  2526  00A9  1D03               	btfss	3,2
  2527  00AA  28C2               	goto	i1l1048
  2528                           
  2529                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1351:             ++*fmt;
  2530  00AB  0879               	movf	vfpfcnvrt@fmt,w
  2531  00AC  0086               	movwf	6
  2532  00AD  0187               	clrf	7
  2533  00AE  3001               	movlw	1
  2534  00AF  0781               	addwf	1,f
  2535  00B0  3141               	addfsr 1,1
  2536  00B1  1803               	skipnc
  2537  00B2  0A81               	incf	1,f
  2538                           
  2539                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1352:             fputc((int)
      +                          '%', fp);
  2540  00B3  3025               	movlw	37
  2541  00B4  00F1               	movwf	fputc@c
  2542  00B5  3000               	movlw	0
  2543  00B6  00F2               	movwf	fputc@c+1
  2544  00B7  087C               	movf	vfpfcnvrt@fp,w
  2545  00B8  00A0               	movwf	??_vfpfcnvrt
  2546  00B9  0820               	movf	??_vfpfcnvrt,w
  2547  00BA  00F3               	movwf	fputc@fp
  2548  00BB  3182  2282         	fcall	_fputc
  2549  00BD                     i1l1044:	
  2550                           
  2551                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1353:             return 1;
  2552  00BD  3001               	movlw	1
  2553  00BE  00F9               	movwf	?_vfpfcnvrt
  2554  00BF  3000               	movlw	0
  2555  00C0  00FA               	movwf	?_vfpfcnvrt+1
  2556  00C1  0008               	return
  2557  00C2                     i1l1048:	
  2558                           
  2559                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1357:         ++*fmt;
  2560  00C2  0879               	movf	vfpfcnvrt@fmt,w
  2561  00C3  0086               	movwf	6
  2562  00C4  0187               	clrf	7
  2563  00C5  3001               	movlw	1
  2564  00C6  0781               	addwf	1,f
  2565  00C7  3141               	addfsr 1,1
  2566  00C8  1803               	skipnc
  2567  00C9  0A81               	incf	1,f
  2568  00CA  2899               	goto	i1l1034
  2569  00CB                     i1l1054:	
  2570                           
  2571                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1362:     fputc((int)(*fmt)[0
      +                          ], fp);
  2572  00CB  0879               	movf	vfpfcnvrt@fmt,w
  2573  00CC  0086               	movwf	6
  2574  00CD  0187               	clrf	7
  2575  00CE  3F40               	moviw [0]fsr1
  2576  00CF  00A0               	movwf	??_vfpfcnvrt
  2577  00D0  3F41               	moviw [1]fsr1
  2578  00D1  00A1               	movwf	??_vfpfcnvrt+1
  2579  00D2  0820               	movf	??_vfpfcnvrt,w
  2580  00D3  0084               	movwf	4
  2581  00D4  0821               	movf	??_vfpfcnvrt+1,w
  2582  00D5  0085               	movwf	5
  2583  00D6  0800               	movf	0,w	;code access
  2584  00D7  00A2               	movwf	??_vfpfcnvrt+2
  2585  00D8  01A3               	clrf	??_vfpfcnvrt+3
  2586  00D9  0822               	movf	??_vfpfcnvrt+2,w
  2587  00DA  00F1               	movwf	fputc@c
  2588  00DB  0823               	movf	??_vfpfcnvrt+3,w
  2589  00DC  00F2               	movwf	fputc@c+1
  2590  00DD  087C               	movf	vfpfcnvrt@fp,w
  2591  00DE  00A4               	movwf	??_vfpfcnvrt+4
  2592  00DF  0824               	movf	??_vfpfcnvrt+4,w
  2593  00E0  00F3               	movwf	fputc@fp
  2594  00E1  3182  2282  3180   	fcall	_fputc
  2595                           
  2596                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1363:     ++*fmt;
  2597  00E4  0879               	movf	vfpfcnvrt@fmt,w
  2598  00E5  0086               	movwf	6
  2599  00E6  0187               	clrf	7
  2600  00E7  3001               	movlw	1
  2601  00E8  0781               	addwf	1,f
  2602  00E9  3141               	addfsr 1,1
  2603  00EA  1803               	skipnc
  2604  00EB  0A81               	incf	1,f
  2605  00EC  28BD               	goto	i1l1044
  2606  00ED                     __end_of_vfpfcnvrt:	
  2607                           
  2608                           	psect	text9
  2609  0282                     __ptext9:	
  2610 ;; *************** function _fputc *****************
  2611 ;; Defined at:
  2612 ;;		line 8 in file "/opt/microchip/xc8/v2.05/pic/sources/c99/common/nf_fputc.c"
  2613 ;; Parameters:    Size  Location     Type
  2614 ;;  c               2    1[COMMON] int 
  2615 ;;  fp              1    3[COMMON] PTR struct _IO_FILE
  2616 ;;		 -> NULL(0), 
  2617 ;; Auto vars:     Size  Location     Type
  2618 ;;		None
  2619 ;; Return value:  Size  Location     Type
  2620 ;;                  2    1[COMMON] int 
  2621 ;; Registers used:
  2622 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2623 ;; Tracked objects:
  2624 ;;		On entry : 0/0
  2625 ;;		On exit  : 0/0
  2626 ;;		Unchanged: 0/0
  2627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2628 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2629 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2630 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2631 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2632 ;;Total ram usage:        8 bytes
  2633 ;; Hardware stack levels used:    1
  2634 ;; Hardware stack levels required when called:    1
  2635 ;; This function calls:
  2636 ;;		_putch
  2637 ;; This function is called by:
  2638 ;;		_vfpfcnvrt
  2639 ;; This function uses a non-reentrant model
  2640 ;;
  2641                           
  2642                           
  2643                           ;psect for function _fputc
  2644  0282                     _fputc:	
  2645                           
  2646                           ;incstack = 0
  2647                           ; Regs used in _fputc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2648  0282  0873               	movf	fputc@fp,w
  2649  0283  1D03               	btfss	3,2
  2650  0284  0873               	movf	fputc@fp,w
  2651  0285  1D03               	btfss	3,2
  2652  0286  2A8B               	goto	i1l1010
  2653  0287  0871               	movf	fputc@c,w
  2654  0288  3183  2306         	fcall	_putch
  2655  028A  0008               	return
  2656  028B                     i1l1010:	
  2657  028B  0873               	movf	fputc@fp,w
  2658  028C  3E03               	addlw	3
  2659  028D  0086               	movwf	6
  2660  028E  0187               	clrf	7
  2661  028F  0016               	moviw fsr1++
  2662  0290  0401               	iorwf	1,w
  2663  0291  1903               	btfsc	3,2
  2664  0292  2AAE               	goto	i1l1014
  2665  0293  0873               	movf	fputc@fp,w
  2666  0294  3E03               	addlw	3
  2667  0295  0086               	movwf	6
  2668  0296  0187               	clrf	7
  2669  0297  3F40               	moviw [0]fsr1
  2670  0298  00F4               	movwf	??_fputc
  2671  0299  3F41               	moviw [1]fsr1
  2672  029A  00F5               	movwf	??_fputc+1
  2673  029B  0A73               	incf	fputc@fp,w
  2674  029C  0086               	movwf	6
  2675  029D  0187               	clrf	7
  2676  029E  3F40               	moviw [0]fsr1
  2677  029F  00F6               	movwf	??_fputc+2
  2678  02A0  3F41               	moviw [1]fsr1
  2679  02A1  00F7               	movwf	??_fputc+3
  2680  02A2  0877               	movf	??_fputc+3,w
  2681  02A3  3A80               	xorlw	128
  2682  02A4  00F8               	movwf	??_fputc+4
  2683  02A5  0875               	movf	??_fputc+1,w
  2684  02A6  3A80               	xorlw	128
  2685  02A7  0278               	subwf	??_fputc+4,w
  2686  02A8  1D03               	skipz
  2687  02A9  2AAC               	goto	u39_25
  2688  02AA  0874               	movf	??_fputc,w
  2689  02AB  0276               	subwf	??_fputc+2,w
  2690  02AC                     u39_25:	
  2691  02AC  1803               	skipnc
  2692  02AD  0008               	return
  2693  02AE                     i1l1014:	
  2694  02AE  0A73               	incf	fputc@fp,w
  2695  02AF  0086               	movwf	6
  2696  02B0  0187               	clrf	7
  2697  02B1  3001               	movlw	1
  2698  02B2  0781               	addwf	1,f
  2699  02B3  3141               	addfsr 1,1
  2700  02B4  1803               	skipnc
  2701  02B5  0A81               	incf	1,f
  2702  02B6  0008               	return
  2703  02B7                     __end_of_fputc:	
  2704                           
  2705                           	psect	text10
  2706  0306                     __ptext10:	
  2707 ;; *************** function _putch *****************
  2708 ;; Defined at:
  2709 ;;		line 31 in file "UART_funcs.c"
  2710 ;; Parameters:    Size  Location     Type
  2711 ;;  byte            1    wreg     unsigned char 
  2712 ;; Auto vars:     Size  Location     Type
  2713 ;;  byte            1    0[COMMON] unsigned char 
  2714 ;; Return value:  Size  Location     Type
  2715 ;;                  1    wreg      void 
  2716 ;; Registers used:
  2717 ;;		wreg
  2718 ;; Tracked objects:
  2719 ;;		On entry : 0/0
  2720 ;;		On exit  : 0/0
  2721 ;;		Unchanged: 0/0
  2722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2723 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2724 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2725 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2726 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2727 ;;Total ram usage:        1 bytes
  2728 ;; Hardware stack levels used:    1
  2729 ;; This function calls:
  2730 ;;		Nothing
  2731 ;; This function is called by:
  2732 ;;		_fputc
  2733 ;; This function uses a non-reentrant model
  2734 ;;
  2735                           
  2736                           
  2737                           ;psect for function _putch
  2738  0306                     _putch:	
  2739                           
  2740                           ;incstack = 0
  2741                           ; Regs used in _putch: [wreg]
  2742                           ;putch@byte stored from wreg
  2743  0306  00F0               	movwf	putch@byte
  2744                           
  2745                           ;UART_funcs.c: 31: void putch(unsigned char byte);UART_funcs.c: 32: {;UART_funcs.c: 33: 
      +                              TXSTA=0x26;
  2746  0307  3026               	movlw	38
  2747  0308  0142               	movlb	2	; select bank2
  2748  0309  009E               	movwf	30	;volatile
  2749                           
  2750                           ;UART_funcs.c: 34:     RCSTAbits.SPEN=1;
  2751  030A  179D               	bsf	29,7	;volatile
  2752                           
  2753                           ;UART_funcs.c: 35:     TXREG=byte;
  2754  030B  0870               	movf	putch@byte,w
  2755  030C  009A               	movwf	26	;volatile
  2756  030D                     i1l127:	
  2757                           ;UART_funcs.c: 36:     while(TX1STAbits.TRMT == 0)continue;
  2758                           
  2759  030D  1C9E               	btfss	30,1	;volatile
  2760  030E  2B0D               	goto	i1l127
  2761                           
  2762                           ;UART_funcs.c: 37:     TX1STAbits.TRMT = 0;
  2763  030F  109E               	bcf	30,1	;volatile
  2764  0310  0008               	return
  2765  0311                     __end_of_putch:	
  2766                           
  2767                           	psect	text11
  2768  032D                     __ptext11:	
  2769 ;; *************** function _printIntSerial *****************
  2770 ;; Defined at:
  2771 ;;		line 45 in file "UART_funcs.c"
  2772 ;; Parameters:    Size  Location     Type
  2773 ;;  intToSend       2    0[COMMON] int 
  2774 ;; Auto vars:     Size  Location     Type
  2775 ;;		None
  2776 ;; Return value:  Size  Location     Type
  2777 ;;                  1    wreg      void 
  2778 ;; Registers used:
  2779 ;;		wreg
  2780 ;; Tracked objects:
  2781 ;;		On entry : 0/0
  2782 ;;		On exit  : 0/0
  2783 ;;		Unchanged: 0/0
  2784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2785 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2786 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2787 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2788 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2789 ;;Total ram usage:        2 bytes
  2790 ;; Hardware stack levels used:    1
  2791 ;; This function calls:
  2792 ;;		Nothing
  2793 ;; This function is called by:
  2794 ;;		_ISR
  2795 ;; This function uses a non-reentrant model
  2796 ;;
  2797                           
  2798                           
  2799                           ;psect for function _printIntSerial
  2800  032D                     _printIntSerial:	
  2801                           
  2802                           ;UART_funcs.c: 46:     TX1REG = intToSend;
  2803                           
  2804                           ;incstack = 0
  2805                           ; Regs used in _printIntSerial: [wreg]
  2806  032D  0870               	movf	printIntSerial@intToSend,w
  2807  032E  0142               	movlb	2	; select bank2
  2808  032F  009A               	movwf	26	;volatile
  2809  0330  0008               	return
  2810  0331                     __end_of_printIntSerial:	
  2811                           
  2812                           	psect	text12
  2813  0311                     __ptext12:	
  2814 ;; *************** function _ADC_read_high *****************
  2815 ;; Defined at:
  2816 ;;		line 56 in file "ADC_funcs.c"
  2817 ;; Parameters:    Size  Location     Type
  2818 ;;		None
  2819 ;; Auto vars:     Size  Location     Type
  2820 ;;		None
  2821 ;; Return value:  Size  Location     Type
  2822 ;;                  2    0[COMMON] unsigned int 
  2823 ;; Registers used:
  2824 ;;		wreg
  2825 ;; Tracked objects:
  2826 ;;		On entry : 0/0
  2827 ;;		On exit  : 0/0
  2828 ;;		Unchanged: 0/0
  2829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2830 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2831 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2832 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2833 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2834 ;;Total ram usage:        4 bytes
  2835 ;; Hardware stack levels used:    1
  2836 ;; This function calls:
  2837 ;;		Nothing
  2838 ;; This function is called by:
  2839 ;;		_ISR
  2840 ;; This function uses a non-reentrant model
  2841 ;;
  2842                           
  2843                           
  2844                           ;psect for function _ADC_read_high
  2845  0311                     _ADC_read_high:	
  2846  0311                     i1l86:	
  2847                           ;ADC_funcs.c: 57:     while(ADCON0bits.GOnDONE == 1);
  2848                           
  2849                           ;incstack = 0
  2850                           ; Regs used in _ADC_read_high: [wreg]
  2851                           
  2852  0311  0141               	movlb	1	; select bank1
  2853  0312  189D               	btfsc	29,1	;volatile
  2854  0313  2B11               	goto	i1l86
  2855                           
  2856                           ;ADC_funcs.c: 58:     return ADRESH;
  2857  0314  081C               	movf	28,w	;volatile
  2858  0315  00F2               	movwf	??_ADC_read_high
  2859  0316  01F3               	clrf	??_ADC_read_high+1
  2860  0317  0872               	movf	??_ADC_read_high,w
  2861  0318  00F0               	movwf	?_ADC_read_high
  2862  0319  0873               	movf	??_ADC_read_high+1,w
  2863  031A  00F1               	movwf	?_ADC_read_high+1
  2864  031B  0008               	return
  2865  031C                     __end_of_ADC_read_high:	
  2866                           
  2867                           	psect	text13
  2868  031C                     __ptext13:	
  2869 ;; *************** function _ADC_read *****************
  2870 ;; Defined at:
  2871 ;;		line 51 in file "ADC_funcs.c"
  2872 ;; Parameters:    Size  Location     Type
  2873 ;;		None
  2874 ;; Auto vars:     Size  Location     Type
  2875 ;;		None
  2876 ;; Return value:  Size  Location     Type
  2877 ;;                  2    0[COMMON] unsigned int 
  2878 ;; Registers used:
  2879 ;;		wreg
  2880 ;; Tracked objects:
  2881 ;;		On entry : 0/0
  2882 ;;		On exit  : 0/0
  2883 ;;		Unchanged: 0/0
  2884 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2885 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2886 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2887 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2888 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2889 ;;Total ram usage:        4 bytes
  2890 ;; Hardware stack levels used:    1
  2891 ;; This function calls:
  2892 ;;		Nothing
  2893 ;; This function is called by:
  2894 ;;		_ISR
  2895 ;; This function uses a non-reentrant model
  2896 ;;
  2897                           
  2898                           
  2899                           ;psect for function _ADC_read
  2900  031C                     _ADC_read:	
  2901  031C                     i1l80:	
  2902                           ;ADC_funcs.c: 52:   while(ADCON0bits.GOnDONE == 1);
  2903                           
  2904                           ;incstack = 0
  2905                           ; Regs used in _ADC_read: [wreg]
  2906                           
  2907  031C  0141               	movlb	1	; select bank1
  2908  031D  189D               	btfsc	29,1	;volatile
  2909  031E  2B1C               	goto	i1l80
  2910                           
  2911                           ;ADC_funcs.c: 53:   return ADRESL;
  2912  031F  081B               	movf	27,w	;volatile
  2913  0320  00F2               	movwf	??_ADC_read
  2914  0321  01F3               	clrf	??_ADC_read+1
  2915  0322  0872               	movf	??_ADC_read,w
  2916  0323  00F0               	movwf	?_ADC_read
  2917  0324  0873               	movf	??_ADC_read+1,w
  2918  0325  00F1               	movwf	?_ADC_read+1
  2919  0326  0008               	return
  2920  0327                     __end_of_ADC_read:	
  2921  007E                     btemp	set	126	;btemp
  2922  007E                     int$flags	set	126
  2923  007E                     wtemp0	set	126


Data Sizes:
    Strings     3
    Constant    0
    Data        0
    BSS         40
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     43      51
    BANK1            80     18      50
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    printf@fmt	PTR const unsigned char  size(2) Largest target is 8192
		 -> ROM(CODE[8192]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    S674_IO_FILE$buffer	PTR unsigned char  size(1) Largest target is 0

    fputc@fp.buffer	PTR unsigned char  size(1) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> printf@ap(BANK0[1]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 8192
		 -> ROM(CODE[8192]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 8192
		 -> ROM(CODE[8192]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> printf@ap(BANK0[1]), 

    vfpfcnvrt@vp	PTR void  size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 2
		 -> vfprintf@cfmt(BANK0[2]), 

    ADC_init@pin	PTR unsigned char  size(2) Largest target is 3
		 -> STR_1(CODE[3]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_printf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_fputc
    _fputc->_putch

Critical Paths under _main in BANK0

    _main->_init_UART
    _init_UART->___aldiv

Critical Paths under _ISR in BANK0

    _ISR->_printf
    _printf->_vfprintf
    _vfprintf->_vfpfcnvrt

Critical Paths under _main in BANK1

    _main->_init_UART

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    1039
                           _ADC_init
                          _init_UART
 ---------------------------------------------------------------------------------
 (1) _init_UART                                           22    18      4     672
                                             39 BANK0      4     0      4
                                              0 BANK1     18    18      0
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     452
                                             24 BANK0     15     7      8
 ---------------------------------------------------------------------------------
 (1) _ADC_init                                             8     6      2     367
                                             24 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                  6     6      0    1904
                                             18 BANK0      6     6      0
                           _ADC_read
                      _ADC_read_high
                     _printIntSerial
                             _printf
                         _readSerial
 ---------------------------------------------------------------------------------
 (4) _readSerial                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _printf                                               6     4      2    1684
                                             13 COMMON     1     1      0
                                             13 BANK0      5     3      2
                         _readSerial (ARG)
                           _vfprintf
 ---------------------------------------------------------------------------------
 (5) _vfprintf                                             8     5      3    1554
                                              5 BANK0      8     5      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (6) _vfpfcnvrt                                           39    37      2    1227
                                              9 COMMON     4     2      2
                                              0 BANK0      5     5      0
                              _fputc
 ---------------------------------------------------------------------------------
 (7) _fputc                                                8     5      3     738
                                              1 COMMON     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (8) _putch                                                1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _printIntSerial                                       2     0      2     174
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (4) _ADC_read_high                                        4     2      2       0
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (4) _ADC_read                                             4     2      2       0
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_init
   _init_UART
     ___aldiv

 _ISR (ROOT)
   _ADC_read
   _ADC_read_high
   _printIntSerial
   _printf
     _readSerial (ARG)
     _vfprintf (ARG)
       _vfpfcnvrt
         _fputc
           _putch
   _readSerial

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      73       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     2B      33       6       63.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50     12      32       8       62.5%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITBANK7            50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7               50      0       0      20        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      73      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BITSFR32             0      0       0      33        0.0%
SFR32                0      0       0      33        0.0%
BITSFR33             0      0       0      34        0.0%
SFR33                0      0       0      34        0.0%
BITSFR34             0      0       0      35        0.0%
SFR34                0      0       0      35        0.0%
BITSFR35             0      0       0      36        0.0%
SFR35                0      0       0      36        0.0%
BITSFR36             0      0       0      37        0.0%
SFR36                0      0       0      37        0.0%
BITSFR37             0      0       0      38        0.0%
SFR37                0      0       0      38        0.0%
BITSFR38             0      0       0      39        0.0%
SFR38                0      0       0      39        0.0%
BITSFR39             0      0       0      40        0.0%
SFR39                0      0       0      40        0.0%
BITSFR40             0      0       0      41        0.0%
SFR40                0      0       0      41        0.0%
BITSFR41             0      0       0      42        0.0%
SFR41                0      0       0      42        0.0%
BITSFR42             0      0       0      43        0.0%
SFR42                0      0       0      43        0.0%
BITSFR43             0      0       0      44        0.0%
SFR43                0      0       0      44        0.0%
BITSFR44             0      0       0      45        0.0%
SFR44                0      0       0      45        0.0%
BITSFR45             0      0       0      46        0.0%
SFR45                0      0       0      46        0.0%
BITSFR46             0      0       0      47        0.0%
SFR46                0      0       0      47        0.0%
BITSFR47             0      0       0      48        0.0%
SFR47                0      0       0      48        0.0%
BITSFR48             0      0       0      49        0.0%
SFR48                0      0       0      49        0.0%
BITSFR49             0      0       0      50        0.0%
SFR49                0      0       0      50        0.0%
BITSFR50             0      0       0      51        0.0%
SFR50                0      0       0      51        0.0%
BITSFR51             0      0       0      52        0.0%
SFR51                0      0       0      52        0.0%
BITSFR52             0      0       0      53        0.0%
SFR52                0      0       0      53        0.0%
BITSFR53             0      0       0      54        0.0%
SFR53                0      0       0      54        0.0%
BITSFR54             0      0       0      55        0.0%
SFR54                0      0       0      55        0.0%
BITSFR55             0      0       0      56        0.0%
SFR55                0      0       0      56        0.0%
BITSFR56             0      0       0      57        0.0%
SFR56                0      0       0      57        0.0%
BITSFR57             0      0       0      58        0.0%
SFR57                0      0       0      58        0.0%
BITSFR58             0      0       0      59        0.0%
SFR58                0      0       0      59        0.0%
BITSFR59             0      0       0      60        0.0%
SFR59                0      0       0      60        0.0%
BITSFR60             0      0       0      61        0.0%
SFR60                0      0       0      61        0.0%
BITSFR61             0      0       0      62        0.0%
SFR61                0      0       0      62        0.0%
BITSFR62             0      0       0      63        0.0%
SFR62                0      0       0      63        0.0%
BITSFR63             0      0       0      64        0.0%
SFR63                0      0       0      64        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Sun Jun 30 03:27:18 2019

            __CFG_CP$OFF 0000                       l34 02F4              __CFG_LVP$ON 0000  
                    l320 0197                      u505 01DB                      u515 01E7  
                    u604 012B                      _ISR 0004                      u605 012A  
                    u614 0136                      u615 0135                      u624 0143  
                    u625 0142                      u634 014E                      u635 014D  
                    u475 01BB                      u645 0173                      u495 01C7  
                    u584 0113                      u585 0112                      u594 011E  
                    u595 011D                      u675 0221                      u685 0246  
                    u697 0180             __CFG_BORV$LO 0000                      wreg 0009  
          __CFG_BBEN$OFF 0000                     ?_ISR 0070             __CFG_ZCD$OFF 0000  
                   l1110 01FF                     l1102 01E6                     l1106 01F1  
                   l1172 010E                     l1092 01B8                     l1084 01A8  
                   l1190 0170                     l1182 013D                     l1094 01C6  
                   l1176 0125                     l1188 015C                     l1298 0165  
                   STR_1 0331                     _PEIE 005E                     i1l29 0038  
                   i1l80 031C                     i1l86 0311            __CFG_FCMEN$ON 0000  
                   _dbuf 00A0                     _main 02DD                     _prec 004F  
                   _nout 004B                     fsr0h 0005                     fsr1h 0007  
                   indf0 0000                     fsr0l 0004                     indf1 0001  
                   fsr1l 0006                     btemp 007E            __CFG_BOREN$ON 0000  
                   start 003A         __end_of_ADC_init 0186         __end_of_ADC_read 0327  
          __CFG_CSWEN$ON 0000            __CFG_MCLRE$ON 0000            ADC_init@block 003C  
                  ??_ISR 0032           ISR@adc_out_low 0036          __end_of___aldiv 0208  
                  ?_main 0070                    _RC1IE 38CD                    i1l127 030D  
           vfpfcnvrt@fmt 0079                    _SPBRG 011B                    u39_25 02AC  
                  _TRISA 0012                    _TRISB 0013                    _TRISC 0014  
                  _TXREG 011A                    _TXSTA 011E            __CFG_WRTB$OFF 0000  
          __CFG_WRTC$OFF 0000                    _flags 0051                    _fputc 0282  
                  _width 004D                    _putch 0306                    status 0003  
                  wtemp0 007E          __initialization 003C             __end_of_main 02F5  
         __CFG_SAFEN$OFF 0000           ADC_init@pinNum 003E          ISR@adc_out_high 0034  
                 ??_main 004B         ??_printIntSerial 0072                   _ADCON0 009D  
                 _ADCON1 009E                   ?_fputc 0071                   _ADRESH 009C  
                 _ADRESL 009B       init_UART@baud_rate 0047                   _ANSELA 1F38  
                 ?_putch 0070                   _ANSELB 1F43                   _ANSELC 1F4E  
                 _RC1REG 0119                   _RC1STA 011D                   i1l1010 028B  
                 i1l1014 02AE                   i1l1034 0099                   i1l1044 00BD  
                 i1l1038 009C                   i1l1054 00CB                   i1l1070 02D8  
                 i1l1214 002A                   i1l1048 00C2                   _RC5PPS 1F25  
                 i1l1068 02BF           __CFG_WDTCCS$SC 0000                   _TX1REG 011A  
                 _TX1STA 011E           __CFG_PWRTE$OFF 0000             vfprintf@cfmt 002B  
              ??___aldiv 0040           __CFG_STVREN$ON 0000                   _printf 02F5  
                 fputc@c 0071                ?_ADC_init 0038                ?_ADC_read 0070  
       __end_of_vfprintf 02DD  __end_of__initialization 004B           __pcstackCOMMON 0070  
          __end_of_fputc 02B7            __end_of_putch 0311               ??_ADC_init 003A  
             ??_ADC_read 0072                  ??_fputc 0074                  ??_putch 0070  
printIntSerial@intToSend 0070   __size_of_ADC_read_high 000B               __pbssBANK0 004B  
             __pbssBANK1 00A0       __size_of_init_UART 007A               __pmaintext 02DD  
        __CFG_PPS1WAY$ON 0000               __pintentry 0004                  ?_printf 002D  
    __CFG_RSTOSC$HFINT32 0000       __size_of_vfpfcnvrt 009E                  ___aldiv 0186  
              ?_vfprintf 0025               _readSerial 0334            _ADC_read_high 0311  
                __ptext1 0208                  __ptext2 0186                  __ptext3 00ED  
                __ptext5 0334                  __ptext6 02F5                  __ptext7 02B7  
                __ptext8 004F                  __ptext9 0282          __size_of_printf 0011  
      __end_of_init_UART 0282          __CFG_WRTAPP$OFF 0000             __size_of_ISR 0036  
       ___aldiv@dividend 003C          __CFG_WRTSAF$OFF 0000                  clrloop0 0328  
   end_of_initialization 004B                  fputc@fp 0073        __end_of_vfpfcnvrt 00ED  
              _RCSTAbits 011D         ___aldiv@quotient 0043           ?_ADC_read_high 0070  
             ??_vfprintf 0028    __CFG_WDTCPS$WDTCPS_31 0000         __CFG_FEXTOSC$OFF 0000  
      __size_of_ADC_init 0099        __size_of_ADC_read 000B             ADC_init@chan 003D  
            ?_readSerial 0070              vfpfcnvrt@ap 007A              vfpfcnvrt@fp 007C  
            vfpfcnvrt@vp 007B           __end_of_printf 0306      start_initialization 003C  
            __end_of_ISR 003A  __size_of_printIntSerial 0004         __CFG_LPBOREN$OFF 0000  
        ??_ADC_read_high 0072              vfprintf@fmt 0025                 ??_printf 007D  
              ___latbits 0002        init_UART@spbrgVal 00D0            __pcstackBANK0 0020  
          __pcstackBANK1 00C0      __size_of_readSerial 0003                 ?___aldiv 0038  
      __size_of_vfprintf 0026                 _BAUD1CON 011F         __CFG_WDTE$NSLEEP 0000  
              _init_UART 0208                 _ADC_init 00ED                 _ADC_read 031C  
         __size_of_fputc 0035           __size_of_putch 000B          ___aldiv@divisor 0038  
        ___aldiv@counter 0041                clear_ram0 0327                 _PIE1bits 0717  
               _PIR1bits 070D                 _PIR3bits 070F                 _RX1DTPPS 1ECB  
      __CFG_BBSIZE$BB512 0000                _vfpfcnvrt 004F               _ADCON0bits 009D  
             ?_init_UART 0047              ADC_init@pin 0038           _printIntSerial 032D  
             vfprintf@ap 0027               vfprintf@fp 002A             ??_readSerial 0070  
       __size_of___aldiv 0082               ?_vfpfcnvrt 0079   __end_of_printIntSerial 0331  
               __ptext10 0306                 __ptext11 032D                 __ptext12 0311  
               __ptext13 031C       __end_of_readSerial 0337            __size_of_main 0018  
   __CFG_WDTCWS$WDTCWS_7 0000                 int$flags 007E                 _vfprintf 02B7  
              printf@fmt 002D                putch@byte 0070               _INTCONbits 000B  
            ??_init_UART 00C0          ?_printIntSerial 0070                 intlevel1 0000  
      __CFG_CLKOUTEN$OFF 0000                 printf@ap 0031    __end_of_ADC_read_high 031C  
            ??_vfpfcnvrt 0020            __pstringtext1 0331            __pstringtext2 0000  
           ___aldiv@sign 0042               _TX1STAbits 011E  
